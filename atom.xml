<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luogg&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/7abdb276bc05b4613cfc8446527b9bd1</icon>
  <subtitle>每天进步一点点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tqqluo.com/"/>
  <updated>2017-10-06T17:30:23.840Z</updated>
  <id>http://tqqluo.com/</id>
  
  <author>
    <name>luogg</name>
    <email>bug_developer@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS3学习总结</title>
    <link href="http://tqqluo.com/2017/10/07/CSS3%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://tqqluo.com/2017/10/07/CSS3学习总结/</id>
    <published>2017-10-06T17:29:47.000Z</published>
    <updated>2017-10-06T17:30:23.840Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写在前边-过了这么长时间-才写博客-最近实在是太忙了-做了两个项目-一个项目用于练手-自我感觉做的很漂亮-一个项目是一套完整的页面体系-答辩时候老师给了100分和99分-并让我打包上传-我很是感动-我的努力终于得到了认可-继续加油"><a href="#写在前边-过了这么长时间-才写博客-最近实在是太忙了-做了两个项目-一个项目用于练手-自我感觉做的很漂亮-一个项目是一套完整的页面体系-答辩时候老师给了100分和99分-并让我打包上传-我很是感动-我的努力终于得到了认可-继续加油" class="headerlink" title="(写在前边~)过了这么长时间,才写博客,最近实在是太忙了,做了两个项目,一个项目用于练手,自我感觉做的很漂亮,一个项目是一套完整的页面体系,答辩时候老师给了100分和99分,并让我打包上传,我很是感动,我的努力终于得到了认可,继续加油!!"></a>(写在前边~)过了这么长时间,才写博客,最近实在是太忙了,做了两个项目,一个项目用于练手,自我感觉做的很漂亮,一个项目是一套完整的页面体系,答辩时候老师给了100分和99分,并让我打包上传,我很是感动,我的努力终于得到了认可,继续加油!!</h4><blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><h1 id="CSS的学习"><a href="#CSS的学习" class="headerlink" title="CSS的学习"></a>CSS的学习</h1><h1 id="day01"><a href="#day01" class="headerlink" title="day01"></a>day01</h1><h2 id="CSS概述"><a href="#CSS概述" class="headerlink" title="CSS概述"></a>CSS概述</h2><ol><li>CSS作用:层叠样式表（Cascading Style Sheets）,美化页面,布局页面,修饰元素的外观,修改元素的位置.</li><li>CSS基本机构:行内样式,内嵌样式,外联样式(link href=”” rel=”stylesheet” type=”text/css”)</li><li>CSS基本语法:选择器{ 属性:属性值;}</li></ol><a id="more"></a><ol><li>CSS特性:<ul><li>样式的优先级特性:行内样式,内嵌样式,外联样式,哪个离得被修饰元素近,哪个修饰就先起到作用 <strong>(就近原则)</strong></li><li>继承特性:当元素属于父-子关系时,给父类定义一个样式,子类也会继承该样式.</li><li>冲突特性:行内样式会和隐含样式冲突,列入b元素加粗,font-weight:normal字体不加粗.会执行后者.</li></ul></li><li>查看选择器以调试bug:f12.</li></ol><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><blockquote><p>选择器就是找到文档中某个元素或者某一批元素,用来设置样式.</p></blockquote><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><ol><li>通用选择器:  *{} 设置所有元素样式</li><li>类型选择器:  标签名开头{}  例如:div{}</li><li><p>类选择器:标签中定义class之后,以.class{}开头</p><ul><li>缩小范围的类选择器:想为多个相同的类中的某一个设置特定的样式可以使用(标签名.classname{}的形式来设置). 例如:div.div1{}</li><li>为元素起小名:同样的,想为多个相同的类中的某一个特定的类设置样式可以使用多个小名的形式(class=”div1 classname”)–&gt;(.div1.classname1{})</li></ul></li><li><p>id选择器:为元素设置id,然后(#id{}设置样式)</p></li><li>属性选择器:将元素的某一个属性设置为选择器进行比设置样式<ul><li>属性中的某元素为选择器:[target]{}</li><li>属性中某元素的属性值(字符串):[target=”_blank”{}]</li><li>属性中某元素属性值字符串开头:[target^=”_b”]</li></ul></li></ol><h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><ol><li>并集选择器:多个类型选择器,中间用逗号隔开 div,span,p{} 为了让多个选择器设置同一个样式</li><li>后代选择器: ul li{} ul中的所有li都会设置样式,包含li中的子元素ul中的li.也就是ul1的孙元素.^_^</li><li>直接后代选择器:ul&gt;li{} 只管父类后边的子类li,不管子类后边的子类ul中的li.<br><img src="http://img.blog.csdn.net/20160718205344335" alt=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line"> #ul1&gt;li&#123;</div><div class="line">            color: #FF0000;</div><div class="line">        &#125;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line">&lt;ul id=&quot;ul1&quot;&gt;</div><div class="line">    &lt;li&gt;无序列表&lt;/li&gt;</div><div class="line">    &lt;li&gt;无序列表&lt;/li&gt;</div><div class="line">    &lt;li&gt;无序列表&lt;/li&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">            &lt;li&gt;子列表项&lt;/li&gt;</div><div class="line">            &lt;li&gt;子列表项&lt;/li&gt;</div><div class="line">            &lt;li&gt;子列表项&lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">    &lt;li&gt;无序列表&lt;/li&gt;</div><div class="line">    &lt;li&gt;无序列表&lt;/li&gt;</div><div class="line">    &lt;li&gt;无序列表&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div></pre></td></tr></table></figure></li></ol><h2 id="伪选择器"><a href="#伪选择器" class="headerlink" title="伪选择器"></a>伪选择器</h2><ol><li>伪元素选择器:配合选择器使用<ul><li>::first-line选择器</li><li>::first-letter选择器</li><li>:before{ content: “”}(前边加文字)</li><li>:after{content:””}</li></ul></li><li>伪类选择器:根据元素位置选择元素 比如ul中的li的位置<ul><li>子元素选择器:</li></ul><ol><li>first-child: ul li:first-child{}</li><li>last-child: ul li:last-child{}</li></ol><ul><li>nth-child选择器:根据索引元素位置判断,从1开始</li></ul><ol><li>:nth-child(n):选择元素的第n个元素作为选择器.<br><strong>n=odd 奇数; n=even 偶数</strong></li><li>:nth-last-child(n):倒数索引</li></ol></li></ol><ol><li>动态伪类选择器(这个有意思)<ul><li>(:link):指定链接未被点击时的样式</li><li>:vistited:链接被访问之后的效果.一般由于浏览器缓存会显示错误</li><li>:hover:鼠标悬停时候的样式</li><li>:active:用户点击时候的样式</li><li>:focus:获得聚焦时候的样式</li></ul></li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充:"></a>补充:</h2><ul><li>CSS对大小写不严格要求,但是还是要书写规范.<h4 id="权值大小比较"><a href="#权值大小比较" class="headerlink" title="权值大小比较:"></a>权值大小比较:</h4></li><li>内联样式表的权值为 1000</li><li>ID 选择器的权值为 1000</li><li>Class 类选择器的权值为 10</li><li>HTML 标签选择器的权值为 1<br><br><br>  优先级：important&gt;内联样式&gt;id&gt;class&gt;标签|伪类|属性选择器&gt;伪元素&gt;通配符（*）&gt;继承</li></ul><h2 id="day02"><a href="#day02" class="headerlink" title="day02"></a>day02</h2><h2 id="颜色和单位的使用"><a href="#颜色和单位的使用" class="headerlink" title="颜色和单位的使用"></a>颜色和单位的使用</h2><ol><li>颜色<ul><li>用颜色的名字表示颜色,比如:red</li><li>用16进制表示演示 比如:#FF0000</li><li>用rgb数值表示颜色,rgb(红,绿,蓝),每个值都在0-255之间<br>一般都用16进制表示颜色</li></ul></li><li>单位<ul><li>px:像素,与分辨率设置相关.</li><li>%相对于浏览器的百分之多少,可以对宽度width做设置,不可以对height做设置</li></ul></li></ol><h2 id="文本样式-text"><a href="#文本样式-text" class="headerlink" title="文本样式(text)"></a>文本样式(text)</h2><ol><li>color:设置文本颜色</li><li>text-align:设置文本对齐方式<ul><li>center</li><li>left</li><li>right</li></ul></li><li>letter-spacing:字间距/字母间距</li><li>word-spacing:单词间距,有空格就设置,中文看空格.</li><li>line-height:行高(第二行的行高=第一行底部到第三行顶部)</li><li>text-indent:一般30px就2个</li><li>text-decoration:文本装饰<ul><li>underline:下划线</li><li>overline:上划线</li><li>line-through:删除线</li><li>blink 闪烁(不会用)</li></ul></li><li>text-transform:大小写转换<ul><li>uppercase:全部大写</li><li>lowercase:全部小写</li><li>capitalize:每个单词以大写开头</li></ul></li><li>text-shadow:创建文本阴影(水平偏移量px,垂直偏移量px,模糊程度px,阴影颜色),模糊程度px值高越模糊.</li><li><strong>设置字体:</strong></li></ol><ul><li>font-style:字体样式italic,oblique斜体</li><li>font-size:设置字体的大小</li><li>font-weight:设置字体的粗细,bolder最粗</li><li>font-family:设置文字字体,楷体,隶书等等</li><li>font简写属性: style weight size family(空格)顺序必须按这个格式,一般用了简写属性之后把行间距letter-spacing放font属性后边,不然会覆盖.</li></ul><h2 id="边框和背景"><a href="#边框和背景" class="headerlink" title="边框和背景"></a>边框和背景</h2><ol><li>为元素应用边框<ul><li>border-width:边框宽度</li><li>border-style:边框样式<br>  none没有边框<br>  dashed虚线<br>  solied实线<br>  double双线<br>  groove槽线<br>  dotted圆点线边框<br>  inset内嵌 outset外凸<br>  ridge 脊线边框</li><li>bolder-color:边框颜色</li><li>简写形式border:width style color 没有先后顺序</li></ul></li><li>单独设置某一条边框<ul><li>border-top/bottom/left/right-width/style/color</li><li>简写形式:border-top{width,style,color}</li></ul></li><li>应用圆角边框(x半径,y半径,xy相同时写一个就好了)<ul><li>border-top/bottom-left/right-radius</li><li>简写:border-radius</li></ul></li><li>设置元素背景<ul><li>background-color:背景颜色</li><li>background-image:{url(“”)} 背景图片地址</li><li>background-repeat:背景图重复方式,一般no-repeat</li><li>background-size:背景图尺寸</li><li>background-position:背景图位置</li><li>简写:background:color image repeat position,尺寸不写,会冲突</li></ul></li><li>创建盒子阴影<ul><li>box-shadow:水平偏移量 垂直偏移量 模糊值 阴影的延伸半径 阴影颜色  10px 10px 5px 0px red;</li><li>添加多个阴影,直接第一个之后用逗号继续写第二个,第一个设置成整数,第二个阴影设置成负数</li></ul></li><li>设置轮廓<ul><li>边框和轮廓的区别：轮廓不属于页面，不会因为应用轮廓而调整页面的布局</li><li>边框占有实际大小,轮廓不占有</li><li>当设置hover悬停时,轮廓修饰的div不会发生位移,边框修饰时位移</li><li>outline-color:轮廓颜色</li><li>outline-style:轮廓样式</li><li>outline-width:轮廓宽度</li><li>outline-offset:轮廓距元素边框偏移量</li><li>简写: outline</li></ul></li></ol><h2 id="其他样式-表格-列表-透明度-光标"><a href="#其他样式-表格-列表-透明度-光标" class="headerlink" title="其他样式(表格,列表,透明度,光标)"></a>其他样式(表格,列表,透明度,光标)</h2><ol><li>表格<ul><li>border-collapse相邻单元格边框处理,合并表格=collapse</li><li>border-spacing:相邻单元格间距</li><li>caption-side:标题位置</li><li>empty-cells:空单元格是否显示</li></ul></li></ol><ol><li><p>列表</p><ul><li>list-style-tyle:列表前边的标记样式 圆点,方点等等</li><li>list-style-image:列表图像标记</li><li>简写:list-style:none 取消列表的所有属性 一般用于导航</li><li>横向导航: li{display:inline}</li></ul></li><li><p>透明度</p><ul><li>opacity:设置透明度(0-1之间取值)</li></ul></li><li><p>光标形状</p><ul><li>cursor:设置光标形状,当光标放在某个div上边,设置等待状,手形状等等.</li></ul></li></ol><h1 id="day03"><a href="#day03" class="headerlink" title="day03"></a>day03</h1><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><p>盒子模型分为元素,内边距,边框,外边距,</p><h2 id="1-设置一定尺寸的元素"><a href="#1-设置一定尺寸的元素" class="headerlink" title="1.设置一定尺寸的元素"></a>1.设置一定尺寸的元素</h2><pre><code>1). width:设置元素宽度2). height:设置元素高度</code></pre><h2 id="2-设置内边距"><a href="#2-设置内边距" class="headerlink" title="2.设置内边距"></a>2.设置内边距</h2><ul><li>padding-top/bottom/right/left</li><li>padding:简写形式</li></ul><h2 id="3-设置外边距-边框到浏览器边缘或者到下一个盒子的距离"><a href="#3-设置外边距-边框到浏览器边缘或者到下一个盒子的距离" class="headerlink" title="3.设置外边距(边框到浏览器边缘或者到下一个盒子的距离)"></a>3.设置外边距(边框到浏览器边缘或者到下一个盒子的距离)</h2><ul><li>margin-top/bottom/left/right</li><li>margin:简写形式</li></ul><h2 id="4-设置最小和最大尺寸-宽度设置为百分比时-扩大或缩小浏览器或者换了大屏或小屏显示器之后-防止元素错位或溢出"><a href="#4-设置最小和最大尺寸-宽度设置为百分比时-扩大或缩小浏览器或者换了大屏或小屏显示器之后-防止元素错位或溢出" class="headerlink" title="4.设置最小和最大尺寸(宽度设置为百分比时,扩大或缩小浏览器或者换了大屏或小屏显示器之后,防止元素错位或溢出)"></a>4.设置最小和最大尺寸(宽度设置为百分比时,扩大或缩小浏览器或者换了大屏或小屏显示器之后,防止元素错位或溢出)</h2><ul><li>min-width:最小值为两div宽度相加值</li><li>max-width:最大值</li></ul><h2 id="5-处理元素内容溢出"><a href="#5-处理元素内容溢出" class="headerlink" title="5.处理元素内容溢出"></a>5.处理元素内容溢出</h2><ul><li>overflow-x/y:x或y轴溢出</li><li>overflow:简写形式: scroll设置滚动条(溢出处理方式)</li></ul><h2 id="6-改变元素类型"><a href="#6-改变元素类型" class="headerlink" title="6.改变元素类型"></a>6.改变元素类型</h2><p>1).元素类型分为:</p><ul><li>inline行内元素:在页面中不可设置宽高,也不会独占一行,b,span</li><li>inline-block行内块级元素:不能独占一行,但能设置宽高.img元素</li><li>block块级元素:独占一行,可以设置宽高,p,div元素</li></ul><p>2).改变元素类型display:</p><ul><li>元素类型可以相互转换,转化之后元素性质也随之改变</li><li>div一般不转化为行内元素,会丢掉,不能设置高</li></ul><p>3).隐藏元素: display:none    </p><h2 id="7-浮动和阻止元素堆叠"><a href="#7-浮动和阻止元素堆叠" class="headerlink" title="7.浮动和阻止元素堆叠"></a>7.浮动和阻止元素堆叠</h2><ul><li>浮动:float:left/right</li><li>消除元素堆叠在一起: clear:both(左右都消除)</li></ul><h2 id="8-案例"><a href="#8-案例" class="headerlink" title="8.案例:"></a>8.案例:</h2><p> 百度页面的搭建:</p><ul><li>技巧:为了让div居中,直接margin:0 auto;</li><li>为了初始不执行浏览器默认特征: *{margin:0px; padding:0px}</li><li>为了防止div块溢出,设置最大最小值. 最小值就是左右两边div相加</li><li>文字垂直居中:line-height</li><li>做导航,链接a标签加到li标签外边</li></ul><h2 id="布局样式"><a href="#布局样式" class="headerlink" title="布局样式"></a>布局样式</h2><h2 id="1-定位方式position"><a href="#1-定位方式position" class="headerlink" title="1. 定位方式position"></a>1. 定位方式position</h2><ul><li>static：默认,元素为普通元素,文档流定位,从上到下</li><li>relative(相对的):元素的位置是相对于普通的位置定位的  ,位移之前的位置 其他元素用不了,一般不做太大的改动 ,对某个元素位置进行微调 ,只能使用top,left 我感觉他是相对于他之前的位置移动的</li><li><p>fixed(固定的)：相对于浏览器窗口来定位  ,<strong>常用!!!</strong>    ,位移之前位置不会被占用,  上下左右都可以使用, <strong>小广告常用手法</strong>, 滚动条不断移,他的位置也不变 ,他会脱离文档流,漂浮于文档流上边,他这个上下左右是相对于边的位置,比如:top50px 不是向上移动50px ,而是元素相对于顶部边框距离50px 设置buttom也同样可以使用,而且拉动滚动条也不会变化位置</p></li><li><p>absolute(绝对的)：元素相对position值不为static的一个祖先元素定  子元素依据祖先元素变化 祖先元素不能为static 依据谁变化,谁不可以为static(默认为static),<strong>发生在父子 或 祖先元素与后代元素之间的位移定位</strong></p><h2 id="2-定位布局"><a href="#2-定位布局" class="headerlink" title="2. 定位布局"></a>2. 定位布局</h2><p>top/bottom/left/right</p><h2 id="3-z-index"><a href="#3-z-index" class="headerlink" title="3. z-index"></a>3. z-index</h2><p>用来设置元素 和 元素 的显示层数,正数 负数 都可以<br>必须配合position使用</p><h2 id="过渡-变形"><a href="#过渡-变形" class="headerlink" title="过渡,变形"></a>过渡,变形</h2><h3 id="1-过渡"><a href="#1-过渡" class="headerlink" title="1. 过渡"></a>1. 过渡</h3><p>过渡:元素由一种样式逐渐变为另一种样式<br>属性:</p><ul><li>transition-delay:设置过渡前的延时</li><li>transition-duration:设置过渡用时</li><li>transition-property:设置过渡参与的属性</li><li>transition-timing-function:过渡速率(linear匀速)</li><li>transition:简写形式(property duration timing-function delay)<h4 id="反向过渡"><a href="#反向过渡" class="headerlink" title="反向过渡:"></a>反向过渡:</h4>hover中设置的,粘贴到div中,就可以了</li></ul></li></ul><h3 id="2-变形"><a href="#2-变形" class="headerlink" title="2. 变形"></a>2. 变形</h3><ul><li>transform:   指定如何变形</li><li>transform: scaleX/Y(1.5)  缩放1.5倍</li><li>transform: rotate(360deg) 旋转360度 deg代表度数,配合过渡时间 效果很好</li><li>transform: skew(X轴角度,Y轴角度) 倾斜的角度</li><li>transform: translate(X轴距离,Y轴距离) 移动的距离</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;写在前边-过了这么长时间-才写博客-最近实在是太忙了-做了两个项目-一个项目用于练手-自我感觉做的很漂亮-一个项目是一套完整的页面体系-答辩时候老师给了100分和99分-并让我打包上传-我很是感动-我的努力终于得到了认可-继续加油&quot;&gt;&lt;a href=&quot;#写在前边-过了这么长时间-才写博客-最近实在是太忙了-做了两个项目-一个项目用于练手-自我感觉做的很漂亮-一个项目是一套完整的页面体系-答辩时候老师给了100分和99分-并让我打包上传-我很是感动-我的努力终于得到了认可-继续加油&quot; class=&quot;headerlink&quot; title=&quot;(写在前边~)过了这么长时间,才写博客,最近实在是太忙了,做了两个项目,一个项目用于练手,自我感觉做的很漂亮,一个项目是一套完整的页面体系,答辩时候老师给了100分和99分,并让我打包上传,我很是感动,我的努力终于得到了认可,继续加油!!&quot;&gt;&lt;/a&gt;(写在前边~)过了这么长时间,才写博客,最近实在是太忙了,做了两个项目,一个项目用于练手,自我感觉做的很漂亮,一个项目是一套完整的页面体系,答辩时候老师给了100分和99分,并让我打包上传,我很是感动,我的努力终于得到了认可,继续加油!!&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;CSS的学习&quot;&gt;&lt;a href=&quot;#CSS的学习&quot; class=&quot;headerlink&quot; title=&quot;CSS的学习&quot;&gt;&lt;/a&gt;CSS的学习&lt;/h1&gt;&lt;h1 id=&quot;day01&quot;&gt;&lt;a href=&quot;#day01&quot; class=&quot;headerlink&quot; title=&quot;day01&quot;&gt;&lt;/a&gt;day01&lt;/h1&gt;&lt;h2 id=&quot;CSS概述&quot;&gt;&lt;a href=&quot;#CSS概述&quot; class=&quot;headerlink&quot; title=&quot;CSS概述&quot;&gt;&lt;/a&gt;CSS概述&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;CSS作用:层叠样式表（Cascading Style Sheets）,美化页面,布局页面,修饰元素的外观,修改元素的位置.&lt;/li&gt;
&lt;li&gt;CSS基本机构:行内样式,内嵌样式,外联样式(link href=”” rel=”stylesheet” type=”text/css”)&lt;/li&gt;
&lt;li&gt;CSS基本语法:选择器{ 属性:属性值;}&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="css" scheme="http://tqqluo.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>HTML5学习总结</title>
    <link href="http://tqqluo.com/2017/10/07/HTML5%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://tqqluo.com/2017/10/07/HTML5学习总结/</id>
    <published>2017-10-06T17:28:30.000Z</published>
    <updated>2017-10-06T17:29:18.441Z</updated>
    
    <content type="html"><![CDATA[<p>#####事实证明，认真的写一篇博客，需要半天的时间。继续加油！</p><blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><h1 id="Html学习总结"><a href="#Html学习总结" class="headerlink" title="Html学习总结"></a>Html学习总结</h1><ol><li>什么是html:HyperTextMarket language，超文本标记语言,是用来描述网页语言，html使用标记标签来描述网页，html不是编程语言，是一种标记语言。</li><li>经历过得版本:HTML2.0、HTML3.2、HTML4.0、HTML4.0.1、HTML5</li><li>H5新特性:<ul><li>用于绘画的 canvas 元素<a id="more"></a></li><li>用于媒介回放的 video 和 audio 元素</li><li>对本地离线存储的更好的支持</li><li>新的特殊内容元素，比如 article、footer、header、nav、section</li><li>新的表单控件，比如 calendar、date、time、email、url、search</li></ul></li><li>html都是由标签组成的</li><li>html的基本格式:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">放置一些属性信息，辅助信息。</div><div class="line">引入一些外部的文件。（css，javascript）</div><div class="line">它里面的内容会先加载。</div><div class="line">meta：提供关于文档的信息</div><div class="line">link：定义与外部资源的关系（css样式）</div><div class="line">style：在文档内容定义样式</div><div class="line">script：定义脚本程序，或者外联脚本文档</div><div class="line">noscript：包含浏览器禁用脚本，或不支持脚本时显示的内容</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">存放真正的数据。</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure><pre><code>- DOCTYPE:声明文档的版本- meta：告诉浏览器一些关于该文档的信息</code></pre><ol><li>html注意事项:<ul><li>多数标签都是有开始标签和结束标签，其中有个别标签因为只有单一功能，或者没有要修饰的内容可以在标签内结束。</li><li>想要对被标签修饰的内容进行更丰富的操作，就用到了标签中的属性，通过对属性值的改变，增加了更多的效果选择。</li><li>属性与属性值之间用“=”连接，属性值可以用双引号或单引号或者不用引号，一般都会用双引号。或公司规定书写规范。<h1 id="h5全局属性"><a href="#h5全局属性" class="headerlink" title="h5全局属性:"></a>h5全局属性:</h1><img src="http://images2015.cnblogs.com/blog/866444/201607/866444-20160707080736249-1253757163.png" alt=""></li></ul></li></ol><h1 id="文本元素"><a href="#文本元素" class="headerlink" title="文本元素"></a>文本元素</h1><pre><code>- br 换行- wbr 软换行，在英文文章中，扩大缩小浏览器的时候，遇到某一个长单词的时候，&lt;wbr&gt;可以规定这个单词从哪里切开。</code></pre><h4 id="lt-a-gt-超链接，属性"><a href="#lt-a-gt-超链接，属性" class="headerlink" title="&lt;a&gt; 超链接，属性:"></a>&lt;a&gt; 超链接，属性:</h4><pre><code>1. href：url。2. targert：页面打开方式_blank新建页面打开3. 锚点:也就是回到顶部那种。先在顶部定义一个id，然后在超链接中使用锚点跳去，href=&quot;#id&quot;;4. 如果href中指定的协议，浏览器不能解析，就会调用应用程序，可以解析的程序就可以打开。</code></pre><ul><li>abrr 缩略语</li><li>b 不带任何强调意义的标记一段文字，加粗</li><li>strong 表示重要内容，加粗</li><li>em 表示着重强调一段文字，倾斜</li><li>i 不带任何强调意义的标记一段文字，倾斜</li><li>cite 表示作品标题，将作品名倾斜</li><li>del 表示从文档中删除的文字</li><li>s 表示文字已经不再准确，也是删除线</li><li>u 不带强调意义的给一段文字加下划线</li><li>ins 表示加入文档的文字，也是下划线</li><li>small 表示小号字体</li><li>sub 表示下标文字</li><li>sup 表示上标文字</li><li>q 表示引自其它的内容，被q标签修饰的自己加了引号表示引用</li><li>pre 表示格式化一段文字，也可以用来引入一段代码</li><li>span css中使用的添加样式的模块</li><li>div会换行，span不会换行</li><li>&lt;!– –&gt;注释</li></ul><h1 id="html实体"><a href="#html实体" class="headerlink" title="html实体"></a>html实体</h1><p>也就是在网页中使用&lt;，&gt;,空格等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&amp;lt;&amp;gt;&amp;nbsp;</div></pre></td></tr></table></figure><h1 id="嵌入元素"><a href="#嵌入元素" class="headerlink" title="嵌入元素"></a>嵌入元素</h1><pre><code>1. 嵌入图像    - img标签嵌入图像- src属性:表示图像的路径- alt属性:表示图像若显示不出来显示的内容- width/height属性:设置图像的宽和高2. 嵌入一张网页- iframe标签表示嵌入一张网页- src属性:表示超链接文档的地址- width/height:该区域的宽和高- name:给iframe命名，方便以后a标签的target属性调用&amp;lt;a href=&quot;shiti_test.html&quot; target=&quot;iframe&quot;&amp;gt;进入实体页面&amp;lt;/a&amp;gt;3. 视频/音频 video/audio- scr:路径- autoplay:自动播放视频- controls:显示播放控件- loop:循环播放- width/height4. 进度条- progress标签- max属性:规定任务一共需要多少工作 100%- value属性:规定已经完成了多少任务 80%</code></pre><h2 id="分组元素"><a href="#分组元素" class="headerlink" title="分组元素"></a>分组元素</h2><pre><code>1. p 段落标签，在开始和结束的位置上都会留下一段空行 - 属性:align,对齐方式2. hr 分割线- 属性:width宽度 100px或者30%- align:对齐方式- size:粗细- color:颜色3. 有序列表ol  li- type:列表前的序标号- start:从第几个开始4. 无序列表ul li5. 自定义列表- dl:表示自定义列表- dd:表示自定义列表项- dt:表示自定义列表标题6. 区域- div:声明一块区域- span:声明一块区域 一般用于用户名密码之后的提示，例如:该用户名已被注册。- div与span的区别:div一长列，自动换行，span一短列，不换行。7. 图片区域- figure图片区域，里边套img标签和figcaption和a标签等- figcaption:表示对图片的描述</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=&quot;http://item.jd.com/2600210.html&quot; target=&quot;_blank&quot;&gt;&lt;figcaption&gt;&lt;font size=&quot;2&quot; color=&quot;red&quot;&gt;华为P9:3999带回家&lt;/font&gt;&lt;/figcaption&gt;&lt;/a&gt;</div></pre></td></tr></table></figure><pre><code>8. pre:格式化一段文字或者添加代码</code></pre><h1 id="表格元素-重要"><a href="#表格元素-重要" class="headerlink" title="表格元素(重要)"></a>表格元素(重要)</h1><pre><code>- 作用:格式化数据- table 声明一个表格</code></pre><h4 id="属性"><a href="#属性" class="headerlink" title="属性:"></a>属性:</h4><ol><li>border 边框 border=1</li><li>width 宽度</li><li>cellpadding 文字与内边框的距离 cellpadding=10</li><li>cellspacing 单元格间距 cellspacing=0</li></ol><ul><li>tr 行</li></ul><ol><li>align:对齐方式</li></ol><ul><li>td 列</li></ul><ol><li>width/height</li><li>colspan 合并列</li><li>rowspan 合并行</li></ol><ul><li>th 表头，会加粗，并且会居中</li><li>caption 表格的标题</li><li>给表格划分区域(不常用)</li></ul><ol><li>thead、tbody、tfoot<h1 id="语义元素-不多用"><a href="#语义元素-不多用" class="headerlink" title="语义元素(不多用)"></a>语义元素(不多用)</h1></li></ol><ul><li>h1~h6:表示标题</li><li>header:表示头部</li><li>nav:表示导航</li><li>footer:表示尾部</li><li>address:表示文档或article的联系信息 </li><li>aside:表示侧边栏</li><li>section:表示主题区域</li><li>article:表示一段独立的内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;article&gt;</div><div class="line">        &lt;h3&gt;Internet Explorer 9&lt;/h3&gt;</div><div class="line">        &lt;p&gt;Windows Internet Explorer 9（简称 IE9）于 2011 年 3 月 14 日发布.....&lt;/p&gt;</div><div class="line">&lt;/article&gt;</div><div class="line"></div><div class="line">    &lt;!--header的使用方法--&gt;</div><div class="line">    &lt;header&gt;</div><div class="line">        &lt;h3&gt;Welcome to my home page&lt;/h3&gt;</div><div class="line">        &lt;p&gt;My name is Luogg&lt;/p&gt;</div><div class="line">    &lt;/header&gt;</div><div class="line"></div><div class="line">   &lt;!--section的使用方法--&gt;</div><div class="line">    &lt;font color=&quot;blue&quot; size=&quot;4&quot;&gt;3.&amp;lt;section&amp;gt;的定义&lt;/font&gt;&lt;br/&gt;</div><div class="line">    &amp;lt;section&amp;gt; 标签定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。&lt;br/&gt;&lt;br/&gt;</div><div class="line"></div><div class="line">    &lt;!--footer的使用方法--&gt;</div><div class="line">    &lt;font color=&quot;blue&quot; size=&quot;4&quot;&gt;4.&amp;lt;footer&amp;gt的使用方法:&lt;/font&gt;</div><div class="line">    &lt;footer&gt;</div><div class="line">        &lt;p&gt;作者 : Luogg&lt;/p&gt;</div><div class="line">        &lt;p&gt;联系我 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot;&gt;luogg.blog.com&lt;/a&gt;&lt;/p&gt;</div><div class="line">    &lt;/footer&gt;</div><div class="line"></div><div class="line">    &lt;!--新特性之nav导航标签的使用--&gt;</div><div class="line">    &lt;nav&gt;</div><div class="line">        &lt;a href=&quot;../right.html&quot;&gt;回到主页&lt;/a&gt;</div><div class="line">    &lt;/nav&gt;</div></pre></td></tr></table></figure><h1 id="框架-就是在一个页面中展示多个页面-，框架标签不能写在body标签当中或下面。不然浏览器无法解析。"><a href="#框架-就是在一个页面中展示多个页面-，框架标签不能写在body标签当中或下面。不然浏览器无法解析。" class="headerlink" title="框架(就是在一个页面中展示多个页面)，框架标签不能写在body标签当中或下面。不然浏览器无法解析。"></a>框架(就是在一个页面中展示多个页面)，框架标签不能写在body标签当中或下面。不然浏览器无法解析。</h1><ul><li>frameset:框架结构</li><li>ros:将页面分为n行</li><li>cols:将页面分为n列</li><li>frame:放在框架中的每个html文档</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;frameset rows=&quot;20%,*&quot;&gt;</div><div class="line">       &lt;frame src=&quot;top.html&quot;&gt;</div><div class="line">       &lt;frameset cols=&quot;15%,*&quot;&gt;</div><div class="line">           &lt;frame src=&quot;left.html&quot;&gt;</div><div class="line">           &lt;frame src=&quot;right.html&quot; name=&quot;right&quot;&gt;</div><div class="line">       &lt;/frameset&gt;</div><div class="line">&lt;/frameset&gt;</div></pre></td></tr></table></figure><h1 id="表单元素-重点"><a href="#表单元素-重点" class="headerlink" title="表单元素(重点)"></a>表单元素(重点)</h1><ul><li>作用:可以和服务器进行交互<h4 id="中的属性"><a href="#中的属性" class="headerlink" title="中的属性:"></a><form></form>中的属性:</h4></li></ul><ol><li>action:定义一个URL，当点击提交按钮时，向这个URL发送数据</li><li>method(get/post):用于向action URL发送数据的HTTP方法。默认是get。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> get和post区别：</div><div class="line">1）get方式表单封装的数据直接显示在url上。post方式数据不显示在url上。</div><div class="line">2）get方式安全级别较低，post级别较高。</div><div class="line">3）get方式数据的长度，post支持大数据。</div></pre></td></tr></table></figure><ul><li>input 标签:定义输入字段，用户可在其中输入数据。<h4 id="input-中-type属性"><a href="#input-中-type属性" class="headerlink" title="input 中 type属性:"></a>input 中 type属性:</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1）type=text 文本框 </div><div class="line">2）type=password 密码 </div><div class="line">3）type=radio 单选按钮 name属性 </div><div class="line">4）type=checkbox 多选按钮</div><div class="line">    单选和多选都有默认值：checked=&quot;checked&quot;</div><div class="line">5）type=reset  重置按钮</div><div class="line">6）type=submit 提交按钮</div><div class="line">7）type=file  上传文件的输入项</div><div class="line">8）type=button 按钮 </div><div class="line">9）type=image 图片（也是提交按钮，）</div><div class="line">10）type=hidden 隐藏标签（用户不用看到的，但是咱们开发时必须要使用的，可以把数据封装到隐藏标签中，和表单一起提交到后台）</div><div class="line">选择标签</div><div class="line"> select /select&gt;选择下拉框 option 表示内容 /option</div><div class="line">文本域textarea</div><div class="line">textarea 文本内容 /textarea</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">value属性:</div><div class="line">对于按钮、重置按钮和确认按钮：定义按钮上的文本。</div><div class="line"></div><div class="line">对于图像按钮：定义传递向某个脚本的此域的符号结果。</div><div class="line"></div><div class="line">对于复选框和单选按钮：定义 input 元素被点击时的结果。</div><div class="line"></div><div class="line">对于隐藏域、密码域以及文本域：定义元素的默认值。</div><div class="line"></div><div class="line">注释：不能与 type=&quot;file&quot; 一同使用。</div><div class="line"></div><div class="line">注释：与 type=&quot;checkbox&quot; 和 type=&quot;radio&quot; 一同使用时，此元素是必需的。</div></pre></td></tr></table></figure><ul><li>name属性:为 input 元素定义唯一的名称。</li></ul><p></p><h1>制作一个基本表单</h1><br>    <h2>form中的元素</h2><br>    <ul><p></p><pre><code>    &lt;li&gt;action:指定表单数据发送的目的地址&lt;/li&gt;    &lt;li&gt;method:提交表单的方法(post,get)&lt;/li&gt;    &lt;li&gt;enctype:数据发送的编码格式,默认的不能上传文件(若要在表单中上传文件,需要用到他的第二个属性,multipart)&lt;/li&gt;    &lt;li&gt;autocomplete:自动补全功能,展示用户输入的历史记录&lt;/li&gt;    &lt;li&gt;target:页面打开方式,默认self,_blank在新页面打开&lt;/li&gt;    &lt;li&gt;name:为表单添加名字,将来JS脚本调用&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;input-type-text属性&lt;/h2&gt;&lt;ul&gt;    &lt;li&gt;maxlength:输入的最大字符长度&lt;/li&gt;    &lt;li&gt;size:设置文本能够显示的字符数&lt;/li&gt;    &lt;li&gt;placeholder:设置占位字符(提示字符)&lt;/li&gt;    &lt;li&gt;list:双击文本框之后,会出现事先设置的提示列表,配合datalist-id,list使用&lt;/li&gt;    &lt;li&gt;readonly:设置只读文本框&lt;/li&gt;    &lt;li&gt;required:用户必须输入一个值&lt;/li&gt;    &lt;li&gt;disabled:生成禁用文本框&lt;/li&gt;    &lt;li&gt;name:表示input控件的名字,提交数据,接受数据时候使用&lt;/li&gt;    &lt;li&gt;value:控件接受输入的值&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;input-type-password密码框属性同上.&lt;/h2&gt;&lt;h2&gt;input-按钮&lt;/h2&gt;&lt;ul&gt;    &lt;li&gt;type=button:普通按钮&lt;/li&gt;    &lt;li&gt;type=reset:重置按钮&lt;/li&gt;    &lt;li&gt;type=submit:提交按钮&lt;/li&gt;    &lt;li&gt;value:按钮上的说明文字&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;数据限制类&lt;/h2&gt;&lt;ul&gt;    &lt;li&gt;type=file:文件上传. required属性:必须被选中&lt;/li&gt;    &lt;li&gt;type=hidden:隐藏文本框.不让用户看见.&lt;/li&gt;    &lt;li&gt;type=checkbox:复选框. checked/required/name:同一组复选框名必须相同.        value:复选框提交的数据的名称&lt;/li&gt;    &lt;li&gt;type=radio:单选框. checked/name:分组&lt;/li&gt;    &lt;li&gt;type=number:数值框. list:提示列表(目前无效)/min/max/step:步长/value初始值        readonly:只读文本框/required:必须输入值&lt;/li&gt;    &lt;li&gt;type=range:滑块数值框  用法与number一样&lt;/li&gt;    &lt;li&gt;type=email:邮件框 用法同text&lt;/li&gt;    &lt;li&gt;type=url:网址框 用法同text&lt;/li&gt;    &lt;li&gt;type=color:颜色框&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;其他控件&lt;/h2&gt;&lt;ul&gt;    &lt;li&gt;select:下拉列表. optgroup-label:给下拉项设置标题(分组)/option-value下拉项&lt;/li&gt;    &lt;li&gt;textarea:多行文本框. rows/cols/placeholder占位符&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;补充&lt;/h2&gt;&lt;ul&gt;    &lt;li&gt;fieldset:对表单进行分组&lt;/li&gt;    &lt;li&gt;legend:fieldset第一个元素,为分组添加说明标签&lt;/li&gt;    &lt;li&gt;label:在表单中添加说明标签&lt;/li&gt;    &lt;li&gt;autofocus:聚焦&lt;/li&gt;    &lt;li&gt;disabled:禁用input元素&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;表单外部调用表单内部属性&lt;/h2&gt;&lt;ul&gt;    &lt;li&gt;将form设置id,然后form=&quot;id&quot;即可调用&lt;/li&gt;    &lt;li&gt;formtarget&lt;/li&gt;    &lt;li&gt;formmethod&lt;/li&gt;    &lt;li&gt;formenctype&lt;/li&gt;    &lt;li&gt;formaction&lt;/li&gt;    &lt;li&gt;form&lt;/li&gt;&lt;/ul&gt;</code></pre></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#####事实证明，认真的写一篇博客，需要半天的时间。继续加油！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Html学习总结&quot;&gt;&lt;a href=&quot;#Html学习总结&quot; class=&quot;headerlink&quot; title=&quot;Html学习总结&quot;&gt;&lt;/a&gt;Html学习总结&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;什么是html:HyperTextMarket language，超文本标记语言,是用来描述网页语言，html使用标记标签来描述网页，html不是编程语言，是一种标记语言。&lt;/li&gt;
&lt;li&gt;经历过得版本:HTML2.0、HTML3.2、HTML4.0、HTML4.0.1、HTML5&lt;/li&gt;
&lt;li&gt;H5新特性:&lt;ul&gt;
&lt;li&gt;用于绘画的 canvas 元素
    
    </summary>
    
    
      <category term="html" scheme="http://tqqluo.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>WebLogic的安装和配置以及MyEclipse中配置WebLogic</title>
    <link href="http://tqqluo.com/2017/10/07/WebLogic%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8AMyEclipse%E4%B8%AD%E9%85%8D%E7%BD%AEWebLogic/"/>
    <id>http://tqqluo.com/2017/10/07/WebLogic的安装和配置以及MyEclipse中配置WebLogic/</id>
    <published>2017-10-06T17:27:02.000Z</published>
    <updated>2017-10-06T17:27:40.144Z</updated>
    
    <content type="html"><![CDATA[<p>##WebLogic</p><p>中间件: 是基础软件的一大类,属于可复用软件的范畴,顾名思义,中间件属于操作系统软件与应用软件的中间,比如:JDK,框架,weblogic.    </p><a id="more"></a>    <pre><code>    weblogic与tomcat区别 :     1.weblogic支持EJB规范,全面支持出了J2EE之外的其他规范,Web Service,SSL,xml等规范.    2.完善的售后服务.    3.集群机制,支持分布式应用.    4.热部署新的web,ejb应用.32位的weblogic不能配64位的jdk安装 :     1.32位的11g weblogic    2.选择中间件安装的位置    3.选择自定义安装 电脑用的64位jdk,所以自己用sun给的32位的jdk    4.会安装两个目录 : wlserver_10.3 11g的weblogic,coherence_3.7,集群的组件    5.主服务端口默认7001,子节点端口号5556    6.安装完成之后,在服务里边会有Oracle WebLogic Node 节点管理器    7.点击quick start 配置    8.域 : 逻辑名称:域中可以有多个服务器,但是只能有一个主服务器,而且这些服务器可以在不同的计算机中,默认创建域后会自动生成一个主服务器,默认的端口为7001,    9. weblogic 目录介绍 :         coherence_3.7 : 集群组件        modules : 第三方的模块包        user_projects : 存放域的文件夹(必须要创建域)        utils : 工具包      quickStart 用来创建域的工具        wlserver_10.3 : webLogic目录    默认域的目录 : G:\Oracle\Middleware\user_projects\domains\base_domain        base_domain\autodeploy : 用于存储主服务器部署的项目(在weblogic中主服务器尽量不要部署项目,他是用来启动后台控制面板和管理其他服务器的)        base_domain\bin\startWeblogic 启动主服务的命令        base_domain\service\AdminService 存储主服务器的配置,其中:security存储了密码        base_domain\config\config.xml : 主服务的配置信息    10.在myeclipse中配置weblogic        貌似只支持web2.5的        在windows-&gt;perference-&gt;service-&gt;weblogic中设置    异常:unable to get file lock,will retry 说明weblogic已经启动了.</code></pre><h3 id="创建多个节点-受管服务器-然后把项目部署到节点服务器中-用主服务器去启动”受管服务器”"><a href="#创建多个节点-受管服务器-然后把项目部署到节点服务器中-用主服务器去启动”受管服务器”" class="headerlink" title="创建多个节点(受管服务器),然后把项目部署到节点服务器中,用主服务器去启动”受管服务器”"></a>创建多个节点(受管服务器),然后把项目部署到节点服务器中,用主服务器去启动”受管服务器”</h3><pre><code>如果在dos下启动的时候,关闭的时候需要正常关闭,点击stop那个服务.G:\Oracle\Middleware\user_projects\domains\base_domain\bin\startManagedWebLogic.cmd : 启动受管服务器startManagedWebLogic.cmd  &quot;被启动节点服务器&quot;指定启动当前节点服务器的主服务器(服务器的地址必须和创建节点服务器指定的监听地址相同)G:\Oracle\Middleware\user_projects\domains\base_domain\bin\startManagedWebLogic.cmd Server-2 http://127.0.0.1:7001 通过主服务来启动子服务</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##WebLogic&lt;/p&gt;
&lt;p&gt;中间件: 是基础软件的一大类,属于可复用软件的范畴,顾名思义,中间件属于操作系统软件与应用软件的中间,比如:JDK,框架,weblogic.    &lt;/p&gt;
    
    </summary>
    
    
      <category term="weblogic" scheme="http://tqqluo.com/tags/weblogic/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb_08.EL、JSTL</title>
    <link href="http://tqqluo.com/2017/10/07/JavaWeb-08-EL%E3%80%81JSTL/"/>
    <id>http://tqqluo.com/2017/10/07/JavaWeb-08-EL、JSTL/</id>
    <published>2017-10-06T17:25:13.000Z</published>
    <updated>2017-10-06T17:39:38.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><p>#day08 EL JSTL</p><p>###EL表达式<br>语法:${}<br><a id="more"></a></p><p>####获取域中对象的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">request.setAttribute(&quot;name&quot;, &quot;小花&quot;);</div><div class="line">session.setAttribute(&quot;name&quot;, &quot;小傻&quot;);</div><div class="line">pageContext.setAttribute(&quot;name&quot;, &quot;小凤&quot;);//按照最小的输出</div><div class="line"></div><div class="line"></div><div class="line">application.setAttribute(&quot;name&quot;, &quot;小四&quot;);</div><div class="line">request.setAttribute(&quot;name.name&quot;,&quot;小花花&quot;);</div><div class="line">%&gt;</div><div class="line"></div><div class="line">$&#123;name &#125;//名字相同情况,输出作用范围最小的,pageContext</div><div class="line">$&#123;pageScope.name &#125;</div><div class="line">$&#123;requestScope.name &#125;</div><div class="line">$&#123;sessionScope.name &#125;</div><div class="line">$&#123;applicationScope.name&#125;</div></pre></td></tr></table></figure></p><p>####域中数组的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">String [] arrs = &#123;&quot;美美&quot;,&quot;波波&quot;,&quot;东东&quot;,&quot;名名&quot;&#125;;</div><div class="line">request.setAttribute(&quot;arrs&quot;, arrs);</div><div class="line">%&gt;</div><div class="line">$&#123; arrs[2] &#125;//东东</div></pre></td></tr></table></figure></p><p>####域中集合的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">    List&lt;String&gt; list = new ArrayList&lt;String&gt;();</div><div class="line">list.add(&quot;美美&quot;);</div><div class="line">list.add(&quot;小凤&quot;);</div><div class="line">list.add(&quot;芙蓉&quot;);</div><div class="line">request.setAttribute(&quot;list&quot;, list);</div><div class="line">%&gt;</div><div class="line">$&#123; list[1] &#125;//小凤</div></pre></td></tr></table></figure></p><p>####域中Map集合的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">    Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</div><div class="line">map.put(&quot;aa&quot;, &quot;美美&quot;);</div><div class="line">map.put(&quot;bb&quot;, &quot;小凤&quot;);</div><div class="line">request.setAttribute(&quot;map&quot;, map);</div><div class="line">%&gt;</div><div class="line">$&#123; map.bb &#125;//小凤</div></pre></td></tr></table></figure></p><p>####域中集合有对象或者Bean的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;%</div><div class="line">List&lt;User2&gt; uList = new ArrayList&lt;User2&gt;();</div><div class="line">uList.add(new User2(&quot;banzhang&quot;,&quot;123&quot;));</div><div class="line">uList.add(new User2(&quot;美美&quot;,&quot;abc&quot;));</div><div class="line">request.setAttribute(&quot;uList&quot;, uList);</div><div class="line">%&gt;</div><div class="line">$&#123; uList[1].username &#125;</div><div class="line"></div><div class="line">===========================</div><div class="line">    List&lt;EmpBean&gt; list = empDao.showByPage(1, searchBean);</div><div class="line">request.setAttribute(&quot;list&quot;, list);</div><div class="line">$&#123;list[0].name &#125;</div></pre></td></tr></table></figure></p><p>####执行运算<br>加减乘除    ${1+2}<br>关系运算    gt小于    lt大于    eq等于    ne不等于    ge大于等于    le小于等于    </p><p>####WEB开发中的对象<br>pageScope<br>requestScope<br>sessionScope<br>applicationScope    </p><p>####EL其他内置对象<br>param    获取单个请求参数,form表单提交过来的参数.<code>${param.name }</code><br>paramValues    获取捆绑数组参数,form表单中input有多个输入并且name一样,<code>${paramValues.password[1] }</code><br>header<br>headerValues<br>initParam    获取全局初始化参数<br>pageContext</p><p>##JSTL<br>JSTL(JSP Standard Tag Library)JSP标准标签库,作用：和EL表达式一起 取代&lt;% %&gt;    </p><p>####版本：<br>1.0        1.1和1.2（区别不大）<br>1.0EL表达式没有纳入规范<br>1.1和1.2EL表达式纳入规范</p><p>####步骤<br>1.下载jar包，导入到工程中<br>jstl.jar   , standard.jar<br>2.导入jar包,引入标签库<br>&lt;%@ taglib uri=”<a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="external">http://java.sun.com/jsp/jstl/core</a>“ prefix=”c” %&gt;    </p><p>###JSTL标签</p><p>####1.<code>&lt;c:out&gt;</code>    输出内容<br>属性 : value 输出的内容(常量或变量)<br>        default:找不到value时候输出<br>        escapeXml:默认是true,进行转义,false不转义,原样输出.<br><code>&lt;c:out value=&quot;&amp;gt${list[1] }&amp;lt&quot; escapeXml=&quot;true&quot;&gt;找不到&lt;/c:out&gt;</code><br>defalut可以写在标签内部,也可以写在两个标签中间.</p><p>####2.<code>&lt;c:set&gt;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">1</div><div class="line">&lt;c:set value=&quot;花花&quot; var=&quot;name&quot; scope=&quot;request&quot;&gt;&lt;/c:set&gt;</div><div class="line">&lt;c:out value=&quot;$&#123;requestScope.name &#125;&quot;&gt;&lt;/c:out&gt;</div><div class="line"></div><div class="line">2</div><div class="line">&lt;%UserBean userBean = new UserBean(); </div><div class="line">request.setAttribute(&quot;userBean&quot;, userBean); %&gt;</div><div class="line">&lt;c:set target=&quot;$&#123;userBean &#125;&quot; property=&quot;loginName&quot; value=&quot;美美&quot;&gt;&lt;/c:set&gt;</div><div class="line">&lt;c:out value=&quot;$&#123;userBean.loginName &#125;&quot;&gt;&lt;/c:out&gt;</div><div class="line"></div><div class="line">3</div><div class="line">&lt;%Map&lt;String,String&gt; map = new HashMap&lt;String,String&gt;();</div><div class="line">//map.put(&quot;第一&quot;, &quot;小王&quot;);</div><div class="line">//map.put(&quot;第二&quot;, &quot;小凤&quot;);</div><div class="line">request.setAttribute(&quot;map&quot;, map);</div><div class="line">%&gt;</div><div class="line">&lt;c:set target=&quot;$&#123;map &#125;&quot; property=&quot;name&quot; value=&quot;丽丽&quot;&gt;&lt;/c:set&gt;</div><div class="line">&lt;c:out value=&quot;$&#123;map.name &#125;&quot;&gt;&lt;/c:out&gt;//丽丽</div><div class="line"></div><div class="line">4彻底在jsp中拜托java代码</div><div class="line">&lt;jsp:useBean id=&quot;userBean&quot; class=&quot;com.luogg.bean.UserBean&quot;&gt;&lt;/jsp:useBean&gt;</div><div class="line">&lt;c:set target=&quot;$&#123;userBean &#125;&quot; property=&quot;loginName&quot;&gt;花花&lt;/c:set&gt;</div><div class="line">&lt;c:out value=&quot;$&#123;userBean.loginName&#125; &quot;&gt;&lt;/c:out&gt;</div></pre></td></tr></table></figure></p><p>#####set中的各个属性<br>value object   值<br>var    String    表达value的属性<br>scope    String    var的有效范围<br>target    String    设置的属性对象,必须是JavaBean或者Map对象<br>property    Object    target对象中的属性名    </p><p>target给的是Bean,property就是Bean的属性名,给的是map,他就是key</p><p>####3.判断标签:if,choose,when,otherwise<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;c:set value=&quot;27&quot; var=&quot;age&quot;&gt;&lt;/c:set&gt;</div><div class="line">1.if的练习</div><div class="line">&lt;c:if test=&quot;$&#123;age&gt;25 &#125;&quot;&gt;</div><div class="line">&lt;c:out value=&quot;还很年轻&quot;&gt;&lt;/c:out&gt;//还很年轻</div><div class="line">&lt;/c:if&gt;</div><div class="line">2.choose的练习</div><div class="line">&lt;c:choose&gt;</div><div class="line">    &lt;c:when test=&quot;$&#123;age&gt;0 &amp;&amp; age&lt;25 &#125;&quot;&gt;</div><div class="line">    &lt;c:out value=&quot;还很年轻&quot;&gt;&lt;/c:out&gt;</div><div class="line">    &lt;/c:when&gt;</div><div class="line">    &lt;c:when test=&quot;$&#123;age&gt;25 &amp;&amp; age&lt;40&#125;&quot;&gt;</div><div class="line">    &lt;c:out value=&quot;不怎么年轻了&quot;&gt;&lt;/c:out&gt;//不怎么年轻了</div><div class="line">    &lt;/c:when&gt;</div><div class="line">    &lt;c:otherwise&gt;</div><div class="line">    嗯...</div><div class="line">    &lt;/c:otherwise&gt;</div><div class="line">&lt;/c:choose&gt;</div></pre></td></tr></table></figure></p><p>####4.迭代标签:foreach<br>var 参数名字<br>items将要迭代的集合<br>varStatus表示迭代的状态,可以访问迭代自身的状态<br>begin    end     step迭代步长</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">1.集合的迭代</div><div class="line"><span class="comment">&lt;!--花花 小丽 小凤--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span></div><div class="line">List&lt;String&gt; list = new ArrayList&lt;String&gt;();</div><div class="line">list.add("花花");</div><div class="line">list.add("小丽");</div><div class="line">list.add("小凤");</div><div class="line">request.setAttribute("list", list);</div><div class="line">%&gt;</div><div class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;requestScope.list &#125;"</span> <span class="attr">var</span>=<span class="string">"iteror"</span>&gt;</span></div><div class="line">$&#123;iteror &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">2.迭代Bean,返回 `List<span class="tag">&lt;<span class="name">EmpBean</span>&gt;</span>`</div><div class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;list &#125;"</span> <span class="attr">var</span>=<span class="string">"EmpBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;EmpBean.empID&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;EmpBean.firstName&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">3.foreach可以作为for循环</div><div class="line"></div><div class="line"><span class="comment">&lt;!--1 2 3 4 5 6 7 8 9 10--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">begin</span>=<span class="string">"1"</span> <span class="attr">end</span>=<span class="string">"10"</span> <span class="attr">step</span>=<span class="string">"1"</span> <span class="attr">var</span>=<span class="string">"i"</span>&gt;</span></div><div class="line">$&#123;i &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">4.foreach可以获取迭代自身的状态,比如获取到此次迭代的索引，已迭代的数量，是否第一个迭代对象，是否最后一个迭代对象。</div><div class="line"></div><div class="line"><span class="comment">&lt;!--0 花花 1 true false; 1 小丽 2 false false; 2 小凤 3 false true;  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">%</span></span></div><div class="line">List&lt;String&gt; list = new ArrayList&lt;String&gt;();</div><div class="line">list.add("花花");</div><div class="line">list.add("小丽");</div><div class="line">list.add("小凤");</div><div class="line">request.setAttribute("list", list);</div><div class="line">%&gt;</div><div class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;list &#125;"</span> <span class="attr">var</span>=<span class="string">"list"</span> <span class="attr">varStatus</span>=<span class="string">"id"</span>&gt;</span></div><div class="line">$&#123;id.index &#125; 迭代到哪个</div><div class="line">$&#123;list &#125;    跌倒的元素</div><div class="line">$&#123;id.count &#125;    迭代次数</div><div class="line">$&#123;id.first &#125;    是否是第一个</div><div class="line">$&#123;id.last &#125;;    是否是最后一个</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#day08 EL JSTL&lt;/p&gt;
&lt;p&gt;###EL表达式&lt;br&gt;语法:${}&lt;br&gt;
    
    </summary>
    
    
      <category term="javaweb" scheme="http://tqqluo.com/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb_07.jsp</title>
    <link href="http://tqqluo.com/2017/10/07/JavaWeb-06-jsp/"/>
    <id>http://tqqluo.com/2017/10/07/JavaWeb-06-jsp/</id>
    <published>2017-10-06T17:23:56.000Z</published>
    <updated>2017-10-06T17:24:42.475Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><h1 id="day07-JSP"><a href="#day07-JSP" class="headerlink" title="day07 JSP"></a>day07 JSP</h1><p>全称 ：Java Server Pages ，jsp实际就是一个servlet<br><strong>jsp运行机制：</strong> 用户访问jsp页面，服务器将其转换成servlet，也就是java文件，然后编译成class文件，最后运行，最后响应给用户。  </p><p>工程jsp中很多波浪线报错，是因为找不到jar包。    </p><h3 id="jsp也是一个servlet"><a href="#jsp也是一个servlet" class="headerlink" title="jsp也是一个servlet"></a>jsp也是一个servlet</h3><a id="more"></a><p><code>public final class HelloJSP_jsp extends org.apache.jasper.runtime.HttpJspBase    implements org.apache.jasper.runtime.JspSourceDependent {</code></p><p>在G:\eclipse项目.metadata.plugins\org.eclipse.wst.server.core\tmp0\work\Catalina\localhost\employeePro\org\apache\jsp 中找到当前项目的jsp文件，可以看到jsp被编译成了java和class文件，修改jsp，运行，可以看到被编译之后的java文件已修改。在_jspService方法下修改了。   </p><p>我们去tomcat的lib目录找到org.apache.jasper.runtime.HttpJspBase，然后对其反编译，<code>public abstract class HttpJspBase extends HttpServlet  implements HttpJspPage{</code>  发现jsp继承的HttpJspBase也继承了HttpServlet，说明jsp也继承了HttpServlet。</p><h3 id="JSP设置编码格式"><a href="#JSP设置编码格式" class="headerlink" title="JSP设置编码格式"></a>JSP设置编码格式</h3><p>右键文件-&gt;properties-&gt;other utf-8<br>设置jsp默认编码：windows-&gt;preference-&gt;搜索jsp-&gt;jsp file-&gt;encoding修改utf-8<br>一般不直接复制文件，会乱码，ctrl+A，复制全部代码然后粘贴到同类名的文件中  </p><p>###JSP脚本元素<br>&lt;% 普通java代码，局部变量，放在了jspService方法中 %&gt;   </p><p>&lt;%! 全局变量，放在_jsp_Service方法外边%&gt; 非静态,只是定义在类中的全局变量,在jsp声明中不可以使用javaService方法中的9个隐式对象.  </p><p>&lt;%= 表达式，输出时候使用%&gt; 比如 ： <code>&lt;tr&gt;&lt;td&gt;&lt;%=rs.getInt(1) %&gt;&lt;/td&gt;&lt;td&gt;&lt;%=rs.getString(3) %&gt;&lt;/td&gt;&lt;/tr&gt;</code></p><p>###JSP注释<br>1.HTML注释<!-- --> 注释在翻译的java文件也存在,在页面也存在<br>2.Java注释,在翻译成的java文件中也存在,在页面不存在.</p><pre><code>&lt;%      1.//        2./* */        3./** **/    %&gt;</code></pre><p>3.JSP注释:&lt;%–  –%&gt;只存在于jsp页面</p><p>###JSP指令<br>语法 : &lt;%@ 指令元素 属性名=属性值 %&gt;<br>　如果一个指令有多个属性，这多个属性可以写在一个指令中，中间用空格隔开。即上面两条指令等价表示如下</p><h4 id="JSP共有3个指令"><a href="#JSP共有3个指令" class="headerlink" title="JSP共有3个指令:"></a>JSP共有3个指令:</h4><p>1.page指令: page指令用于定义JSP页面的各种属性,<strong>import属性可以出现多次,其他属性只能出现一次</strong>,重点:session,import,contentType,pageEncoding,isELIgnonred    </p><ul><li>session属性为true时,翻译后的servlet中会自动创建session对象，false则不创建。</li><li>errorPage属性:指定错误页面</li><li>isErrorPage属性 :为true时，表示该页面是处理错误页面，JSP引擎在翻译成servlet时，会定义一个exception对象，从而就可以用exception隐式对象获得出错信息。  </li><li>import属性:引入java中的jar包(使用多次)</li><li>language属性:JSP文件允许嵌入的语言,只支持一种JAVA语言.</li><li>extends:JSP翻译成Servlet文件时servlet继承的类.(不需要改变)</li><li>buffer属性:设置缓冲区大小</li><li>aotoFlush:设置默认刷新缓冲区(不需要修改)</li><li>contentType属性:服务器端输出所有内容采用的编码</li><li>pageEncoding属性:JSP翻译成Servlet文件时采用的编码</li><li>isElIgnored属性:是否忽略EL表达式(false不忽略)</li></ul><p>2.include指令,静态引入其他JSP页面,</p><ul><li>语法：&lt;%@ include file=”要包含文件的地址（静态包含）” %&gt;<br><code>&lt;%@ include file=&quot;/include/head.jsp&quot; %&gt;</code></li></ul><p>3.taglib指令:引入标签库文件语法：&lt;%taglib  %&gt;</p><p>   属性:</p><ul><li>uri    ：引入标签库文件的名称    </li><li>prefix：标签库的前缀名</li></ul><p>###JSP9大隐式对象(直接使用)</p><ul><li>request：//就是Servlet里的HttpServletRequest , 方法setAttribute()    getAttribute()</li><li>response： //就是Servlet里的HttpServletResponse,方法:addCookie()        , getWriter()</li><li>session： //就是Servlet里的HttpSession,方法setAttribute()    ,getAttribute()</li><li>application： //就是servlet里的    servletContext,方法setAttribute()     , getAttribute()</li><li>config： //就是Servlet里的servletConfig,方法getInitParameter(),     getInitParameterNames()</li><li>page： //就是Servlet自己,Object</li><li>exception： //异常，只有errorPage才有,并且isErrorPage=true时才可以使用</li><li>out：//JSP页面输出,JspWriter,方法 write()        , print()</li><li><p>pageContext：//pageContext方法setAttribute(),    getAttribute(), 域对象,自己存取值 , 向其他的域存取值。可以获取其他8个对象。编写框架或者通用性较高代码。</p><ul><li>pageContext对象是JSP技术中最重要的一个对象，它代表JSP页面的运行环境，这个对象不仅封装了对其它8大隐式对象的引用，它自身还是一个域对象，可以用来保存数据。并且，这个对象还封装了web开发中经常涉及到的一些常用操作，例如引入和跳转其它资源、检索其它域对象中的属性等。</li><li><p>setAttribute(String name, Object value, int scope) </p><ul><li>getAttribute(String name, int scope) </li><li>findAttribute(String name) <ul><li><strong>返回page隐式对象</strong></li><li>getRequest()  //方法返回request隐式对象</li><li>getResponse()  //方法返回response隐式对象</li><li>getgetServletContext()  //方法返回    application隐式对象</li><li>getServletConfig()  //方法返回config隐式对象</li><li>getSession()  //方法返回session隐式对象</li><li>getOut()  //方法返回out隐式对象</li></ul></li></ul></li></ul></li></ul><pre><code>- 另外还有个findAttribute方法（*重要，查找各个域中的属性，EL表达式就依赖于这个方法），可以直接调用pageContext.findAttribute(String name)，首先会从pageContext里找该属性，如果没有，会依次按照下面顺序在相应的域中查找：request, session, servletContext，如果没找着，返回null，否则返回属性值。- 　pageContext类中定义了一个forward方法和两个include方法分别简化和替代RequestDispatcher.forward方法和include方法，方法接收的资源如果以&quot;/&quot;开头，&quot;/&quot;代表当前web应用。不过这里的include是动态包含，不建议使用include。</code></pre><p>###JSP4个域对象<br>    ServletContext    application域,整个web应用,servletContext中存的数据在整个应用程序范围内都可以取出<br>    session            session域,一次会话,/session中存的数据在会话范围内都可以取出<br>    request            request域,一次请求,request中存的数据在请求范围内都可以取出<br>    pageContext        page域,当前页面,pageContext中存的数据在页面范围都可以取出</p><p>###JSP3大标签(动作)<br>它用于在JSP页面中提供业务逻辑功能，避免在JSP页面中直接编写java代码造成JSP页面难以维护。</p><p>1.<jsp:include>标签 : 页面的包含（动态包含）    </jsp:include></p><ul><li>属性：page    要包含的页面</li><li>语法：</li></ul><p><code>&lt;jsp:include page=&quot;index.html&quot;&gt;&lt;/jsp:include&gt;</code><br>　　相当于调用<code>pageContext.include(&quot;relativeURL&quot;)</code></p><p>2.<jsp:forward>标签 : 转发</jsp:forward></p><ul><li>属性：page    要转发的页面</li><li>语法: <code>&lt;jsp:forward page=&quot;&quot;&gt;&lt;/jsp:forward&gt;</code></li></ul><p>3.<jsp:param>标签 : 当使用<jsp:include>和<jsp:forward>标签引入或将请求转发给其它资源时，可以使用<jsp:param>标签向这个资源传递参数。    </jsp:param></jsp:forward></jsp:include></jsp:param></p><ul><li>属性 : name：参数名称    value：参数值    </li><li>语法 :<br>`<jsp:include page="index.jsp"><pre><code>&lt;jsp:param value=&quot;&quot; name=&quot;&quot;/&gt;</code></pre>  </jsp:include>`<br>  相当于index?name=…&amp;value=….</li></ul><p>或者<br><code>&lt;jsp:forward page=&quot;index.jsp&quot;&gt;        &lt;jsp:param value=&quot;&quot; name=&quot;&quot;/&gt;    &lt;/jsp:forward&gt;</code></p><p>###JSP映射</p><p>  JSP也可以像Servlet那样映射，因为JSP本来就是Servlet。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">    &lt;servlet&gt;</div><div class="line">    &lt;servlet-name&gt;SimpleJspServlet&lt;/servlet-name&gt;</div><div class="line">    &lt;jsp-file&gt;/jsp/simple.jsp&lt;/jsp-file&gt;</div><div class="line">&lt;/servlet&gt;</div><div class="line">&lt;servlet-mapping&gt;</div><div class="line">    &lt;servlet-name&gt;SimpleJspServlet&lt;/servlet-name&gt;</div><div class="line">    &lt;url-pattern&gt;/xxx/yyy.html&lt;/url-pattern&gt;</div><div class="line">&lt;/servlet-mapping&gt;</div></pre></td></tr></table></figure><p>/jsp/simple.jsp表示在webRoot/jsp目录下的simple.jsp文件</p><p>###include指令与include动作区别<br>include指令：<code>&lt;%@include   file=&quot;top.jsp&quot; %&gt;</code><br>include标准动作：<code>&lt;jsp:include page=&quot;top.jsp&quot;&gt;&lt;/jsp:include&gt;</code></p><p>include指令：是在编译之前就把包含文件的代码合并在了一起，共同生成一个.java文件，所以在编译的时候会出现重复定义了本地变量的情况。而include动作先将主页面独立生成一个.class文件，运行时候和包含的文件合并在一起，所以不会出现重复定义变量的错误信息。</p><p>###设置404 500错误提示页面<br>在xml中加入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;error-page&gt;</div><div class="line">&lt;error-code&gt;404&lt;/error-code&gt;</div><div class="line">&lt;location&gt;/error404.jsp&lt;/location&gt;</div><div class="line">&lt;/error-page&gt;</div></pre></td></tr></table></figure></p><p>然后在错误指定的页面page指令中输入isErrorPage=”true”</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;day07-JSP&quot;&gt;&lt;a href=&quot;#day07-JSP&quot; class=&quot;headerlink&quot; title=&quot;day07 JSP&quot;&gt;&lt;/a&gt;day07 JSP&lt;/h1&gt;&lt;p&gt;全称 ：Java Server Pages ，jsp实际就是一个servlet&lt;br&gt;&lt;strong&gt;jsp运行机制：&lt;/strong&gt; 用户访问jsp页面，服务器将其转换成servlet，也就是java文件，然后编译成class文件，最后运行，最后响应给用户。  &lt;/p&gt;
&lt;p&gt;工程jsp中很多波浪线报错，是因为找不到jar包。    &lt;/p&gt;
&lt;h3 id=&quot;jsp也是一个servlet&quot;&gt;&lt;a href=&quot;#jsp也是一个servlet&quot; class=&quot;headerlink&quot; title=&quot;jsp也是一个servlet&quot;&gt;&lt;/a&gt;jsp也是一个servlet&lt;/h3&gt;
    
    </summary>
    
    
      <category term="javaweb" scheme="http://tqqluo.com/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb_06.filter过滤器</title>
    <link href="http://tqqluo.com/2017/10/07/JavaWeb-06-filter%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://tqqluo.com/2017/10/07/JavaWeb-06-filter过滤器/</id>
    <published>2017-10-06T17:23:08.000Z</published>
    <updated>2017-10-06T17:23:37.793Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><h1 id="day06"><a href="#day06" class="headerlink" title="day06"></a>day06</h1><p>###request 对象常用方法<br><img src="http://img.blog.csdn.net/20161031215721099" alt="这里写图片描述"></p><a id="more"></a><p><img src="http://img.blog.csdn.net/20161031215735916" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20161031220102933" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20161031220113511" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20161031220122121" alt="这里写图片描述"></p><h3 id="response-对象常用方法"><a href="#response-对象常用方法" class="headerlink" title="response 对象常用方法"></a>response 对象常用方法</h3><p><img src="http://img.blog.csdn.net/20161031220232013" alt="这里写图片描述"></p><p>302 : 页面跳转  </p><p>###Servlet过滤器  </p><p>1.统一整个webApp应用的编码方式<br>2.禁止浏览器缓存webApp动态资源<br>3.控制浏览器缓存静态资源<br>4.实现URL权限控制<br>5.过滤敏感内容  </p><p>web-xml中设置 : url-pattern /* 过滤所有页面  </p><p><code>chain.doFilter(request, response);//放行,过滤拦截</code></p><h4 id="filter生命周期"><a href="#filter生命周期" class="headerlink" title="filter生命周期 :"></a>filter生命周期 :</h4><p>启动服务器的时候创建并且初始化,<br>访问页面的时候调用doFilter方法,<br>关闭服务的时候生命结束.  </p><p>filter对象只会创建一次,init方法只会执行一次,destroy方法也只会执行一次</p><hr><p>##filter 应用</p><h4 id="一-设置页面字体-还有post表单提交的时候乱码"><a href="#一-设置页面字体-还有post表单提交的时候乱码" class="headerlink" title="一.设置页面字体,还有post表单提交的时候乱码."></a>一.设置页面字体,还有post表单提交的时候乱码.</h4><p>1.创建filter,并且配置web-xml<br>2.将web-xml中<url-pattern>设置为/*<br>在filter-class下边加入 : 因为一般总的控制页面编码格式是在web-xml修改的</url-pattern></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;init-param&gt;</div><div class="line">   &lt;param-name&gt;encoding&lt;/param-name&gt;</div><div class="line">   &lt;param-value&gt;utf-8&lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class EncodingFilter implements Filter &#123;</div><div class="line">private String encoding = &quot;utf-8&quot;;</div><div class="line"></div><div class="line">public void destroy() &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</div><div class="line">    //4.在doFilter方法下边,设置页面编码格式还有post请求表单编码格式 </div><div class="line">request.setCharacterEncoding(encoding);//设置post表单中文乱码</div><div class="line">response.setContentType(&quot;text/html;charaset=&quot;+encoding);</div><div class="line">chain.doFilter(request, response);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void init(FilterConfig fConfig) throws ServletException &#123;</div><div class="line">//3.在Filter页面定义一个`private String encoding = &quot;utf-8&quot;;`  </div><div class="line">//在Filter页面,init方法下边 :   调用xml中设置的encoding</div><div class="line">String en = fConfig.getInitParameter(encoding);</div><div class="line">if(en != null &amp;&amp; !&quot;&quot;.equals(encoding))&#123;</div><div class="line">encoding = en;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>最后在用户登录界面,用户名输入中文,在控制台测试就好了.</p><hr><h4 id="二-用户登录校验-不让用户直接登录到主页"><a href="#二-用户登录校验-不让用户直接登录到主页" class="headerlink" title="二.用户登录校验,不让用户直接登录到主页"></a>二.用户登录校验,不让用户直接登录到主页</h4><p>清理缓存之后,第一次只可以进去index.html输入用户名密码界面,当输入正确密码之后,进入<br>主页,但是在此直接输入主页地址,还是可以直接进来,是因为session还存在,可以获取到session name.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class UrlFilter implements Filter &#123;</div><div class="line">/**</div><div class="line"> * 用户登录校验,排除登录页面和校验页面</div><div class="line"> */</div><div class="line">public void destroy() &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)</div><div class="line">throws IOException, ServletException &#123;</div><div class="line">HttpServletRequest req = (HttpServletRequest) request;</div><div class="line">HttpServletResponse rep = (HttpServletResponse) response;</div><div class="line">String uri = req.getRequestURI();</div><div class="line">System.out.println(uri);</div><div class="line">HttpSession session = req.getSession();</div><div class="line">Object obj = session.getAttribute(&quot;name&quot;);</div><div class="line">if (uri.endsWith(&quot;index.html&quot;) || uri.endsWith(&quot;CheckUser&quot;)) &#123;//uri以xxx结尾</div><div class="line">chain.doFilter(request, response);</div><div class="line">&#125; else &#123;</div><div class="line">if (obj == null) &#123;</div><div class="line">rep.sendRedirect(&quot;/wx_web_day02/index.html&quot;);</div><div class="line">&#125; else &#123;</div><div class="line">chain.doFilter(request, response);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void init(FilterConfig fConfig) throws ServletException &#123;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>response.sendRedirect(“BSessionTest”);//重定向使用了两次过滤器<br>request.getRequestDispatcher(“BSessionTest”).forward(request, response);//内部转发使用了一次过滤器</p><h4 id="三-过滤掉敏感词功能"><a href="#三-过滤掉敏感词功能" class="headerlink" title="三.过滤掉敏感词功能"></a>三.过滤掉敏感词功能</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException &#123;</div><div class="line">String s = request.getParameter(&quot;userName&quot;);</div><div class="line">if(s.indexOf(&apos;猪&apos;)!=-1)&#123;</div><div class="line">s = s.replace(&apos;猪&apos;, &apos;*&apos;);</div><div class="line">request.setAttribute(&quot;userName&quot;, s);</div><div class="line">System.out.println(s);</div><div class="line">&#125;</div><div class="line"></div><div class="line">chain.doFilter(request, response);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;day06&quot;&gt;&lt;a href=&quot;#day06&quot; class=&quot;headerlink&quot; title=&quot;day06&quot;&gt;&lt;/a&gt;day06&lt;/h1&gt;&lt;p&gt;###request 对象常用方法&lt;br&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161031215721099&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaweb" scheme="http://tqqluo.com/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb_05.cookie、session、httpSession</title>
    <link href="http://tqqluo.com/2017/10/07/JavaWeb-05-cookie%E3%80%81session%E3%80%81httpSession/"/>
    <id>http://tqqluo.com/2017/10/07/JavaWeb-05-cookie、session、httpSession/</id>
    <published>2017-10-06T17:22:07.000Z</published>
    <updated>2017-10-06T17:22:36.949Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><h2 id="两个会话的技术cookie-session"><a href="#两个会话的技术cookie-session" class="headerlink" title="两个会话的技术cookie session"></a>两个会话的技术cookie session</h2><p>会话概念 : 打开浏览器,多次访问WEB资源,关闭浏览器,整个过程称为一次会话.<br>cookie 客户端技术  不是很安全<br>session 服务器端技术 </p><a id="more"></a><h3 id="session-技术"><a href="#session-技术" class="headerlink" title="session 技术"></a>session 技术</h3><p>创建之后,访问<br>关闭浏览器之后.session销毁,  </p><p>同一个名字,不同的value,最后的会覆盖之前的  </p><ul><li>cookie基于客户端，不安全，并且大小和个数的限制。</li><li>void setAttribute(String name, Object value) </li><li>Object getAttribute(String name)  </li><li>String getId()  获取seesion的唯一的ID</li><li>void invalidate()  销毁的seesion</li><li>void removeAttribute(String name) 从会话中删除name的属性值,若不存在不会执行</li><li>void setMaxInactiveInterval(int seconds) 允许客户请求的最长时间</li></ul><p>====</p><h3 id="session的创建和销毁"><a href="#session的创建和销毁" class="headerlink" title="session的创建和销毁"></a>session的创建和销毁</h3><ul><li>第一次访问资源，调用request.getSession()，创建session</li><li><p>销毁</p><ul><li>非正常关闭服务器（）</li><li>session的过期，Tomcat默认是30分钟。(用户的发呆时间)</li><li><p>调用session.invalidate()手动销毁session</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">session属性的默认保存时间为30min，如果要修改，可以在web.xml和程序中进行修改以Tomcat为例，Tomcat --&gt; conf --&gt; web.xml --&gt; &lt;session-fonfig&gt; --&gt; &lt;session-timeout&gt;   </div><div class="line">在程序中修改用 : setMaxInactiveInterval(int val)单位：秒</div></pre></td></tr></table></figure></li></ul></li></ul><h3 id="session-可以用来做什么"><a href="#session-可以用来做什么" class="headerlink" title="session 可以用来做什么"></a>session 可以用来做什么</h3><p>1.网上商城中的购物车。<br>2.保存登录的用户信息。<br>3.将某些数据放入到session中，供同一用户的各个页面使用。<br>4.防止用户非法登录到某个页面  </p><h3 id="HttpSession-生命周期"><a href="#HttpSession-生命周期" class="headerlink" title="HttpSession 生命周期"></a>HttpSession 生命周期</h3><p>1、客户端向服务器第一次发送请求的时候，request中并无SessionID<br>2、此时服务器会创建一个Session对象，并分配一个SessionID。Session对象保存在服务器端，此时为新建状态，调用session.isNew()返回true。<br>3、当服务器端处理完毕后，会将SessionID通过response对象传回到客户端，浏览器负责保存到当前进程中。<br>4、当客户端再次发送请求时，会同时将SessionID发送给服务器。<br>5、服务器根据传递过来的SessionID将这次请求(request)解析<br>6、循环执行过程3-5，直到Session超时或销毁</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;两个会话的技术cookie-session&quot;&gt;&lt;a href=&quot;#两个会话的技术cookie-session&quot; class=&quot;headerlink&quot; title=&quot;两个会话的技术cookie session&quot;&gt;&lt;/a&gt;两个会话的技术cookie session&lt;/h2&gt;&lt;p&gt;会话概念 : 打开浏览器,多次访问WEB资源,关闭浏览器,整个过程称为一次会话.&lt;br&gt;cookie 客户端技术  不是很安全&lt;br&gt;session 服务器端技术 &lt;/p&gt;
    
    </summary>
    
    
      <category term="javaweb" scheme="http://tqqluo.com/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb_04.查询、乱码、路径问题、重定向、cookie</title>
    <link href="http://tqqluo.com/2017/10/07/JavaWeb-04-%E6%9F%A5%E8%AF%A2%E3%80%81%E4%B9%B1%E7%A0%81%E3%80%81%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E3%80%81%E9%87%8D%E5%AE%9A%E5%90%91%E3%80%81cookie/"/>
    <id>http://tqqluo.com/2017/10/07/JavaWeb-04-查询、乱码、路径问题、重定向、cookie/</id>
    <published>2017-10-06T17:21:00.000Z</published>
    <updated>2017-10-06T17:21:21.725Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p>DAO层都是一些数据库的增删改查操作<br>Servlet,控制层<br>点击页面的搜索,把输入的信息提交到servlet,  </p><a id="more"></a><p>实体Bean是针对数据库中的字段而建的, 不和数据库做对应,而是打包一些零散的值的Bean,和它的页面做对应,包名为:com.xxx.view 针对页面的实体Bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">String sql = <span class="string">"select * from copy_emp where 1=1 "</span>;<span class="comment">//这局话可以后边添加对应的and xxx=xxx信息; </span></div><div class="line"></div><div class="line"><span class="comment">//sql语句 精华,判断搜索框是否为空,若不为空,表示输入了数据,那么就在where后边添加对应的and xxx=xxx信息; </span></div><div class="line">    <span class="keyword">if</span>(bean.getEmpId() != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(bean.getEmpId()))&#123;</div><div class="line">sql = sql + <span class="string">" and employee_id= "</span> + bean.getEmpId();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(bean.getName() != <span class="keyword">null</span> &amp;&amp; ! <span class="string">""</span>.equals(bean.getName()))&#123;</div><div class="line">sql = sql + <span class="string">" and last_name like '%"</span> + bean.getName() +<span class="string">"%'"</span>;</div><div class="line">&#125;</div><div class="line">    <span class="keyword">if</span>(bean.getStartHiredate() !=<span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(bean.getStartHiredate()))&#123;</div><div class="line">sql = sql+ <span class="string">" and hire_date &gt;= to_date('"</span>+bean.getStartHiredate()+<span class="string">"','"</span>+<span class="string">"yyyy-mm-dd"</span>+<span class="string">"')"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">思路 : 将用户输入的搜索信息,传给servlet,通过页面Bean接受,然后将页面bean通过参数形式传递给dao中的搜索方法,返回list,list返回搜索得到的信息.</div></pre></td></tr></table></figure></p><h2 id="页面乱码解决方案"><a href="#页面乱码解决方案" class="headerlink" title="页面乱码解决方案"></a>页面乱码解决方案</h2><ul><li>response.setContentType(“text/html;charset=utf-8”);//页面显示汉字</li><li>针对表单提交post请求方式<br>request.setCharacterEncoding(“utf-8);</li><li>针对表单提交get请求方式<br>String user = request.getParameter(“user”);<br>user = new String(user.getByte(“iso-8859-1”),”utf-8”);  </li></ul><h2 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h2><p>开发一般用绝对路径,<br><strong>绝对路径</strong> : 是一个完整的路径, 语法 : 工程名字/资源的路径<br><strong>相对路径</strong> : 是相对于当前资源的路径去找别的路径; ../a/index.html 代表从当前路径挑出来一层,找到a文件夹下的index.html资源<br><strong>相对路径开头不加/,绝对路径开头加/</strong></p><p>转发的时候(request.getRequestDispatcher()) , Servlet中绝对路径写的时候不加工程名字</p><p>###转发重定向(参考day02)<br>内部转发和重定向的区别  request.getRequestDispatcher(path)转发/response.sendRedirect(path)重定向<br>区别在于是否发起新的请求，是否共用同一个request对象  </p><ul><li>转发没有发起新的请求,url路径不变,与转发的页面公用一个request对象,因此可以传递信息</li></ul><ul><li>重定向发起了新的请求,url改变,没有公用一个request对象,不可以传递信息<br><img src="http://img.blog.csdn.net/20161025224220074" alt="这里写图片描述"></li></ul><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1.创建cookie</span></div><div class="line">Cookie c = <span class="keyword">new</span> Cookie(String name,String value);</div><div class="line"><span class="comment">//2.设置cookie的存在时间</span></div><div class="line">c.setMaxAge(<span class="number">3000</span>);</div><div class="line"><span class="comment">//3.将一个cookie添加到客户端</span></div><div class="line">response.add(c);</div><div class="line"><span class="comment">//4.读取cookie(从客户端读到服务器)</span></div><div class="line">request.getCookie();</div></pre></td></tr></table></figure><h4 id="cookie的生命周期分为两种类型"><a href="#cookie的生命周期分为两种类型" class="headerlink" title="cookie的生命周期分为两种类型 :"></a>cookie的生命周期分为两种类型 :</h4><ol><li>没有设置过(setMaxAge())时间的,关闭浏览器时生命周期结束</li><li>设置过时间的,保存在本地磁盘,当设置的时间到达,或把值从本地删除时生命周期结束.<br>注意：不同浏览器cookie保存的值的位置是不同的</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;搜索功能&quot;&gt;&lt;a href=&quot;#搜索功能&quot; class=&quot;headerlink&quot; title=&quot;搜索功能&quot;&gt;&lt;/a&gt;搜索功能&lt;/h2&gt;&lt;p&gt;DAO层都是一些数据库的增删改查操作&lt;br&gt;Servlet,控制层&lt;br&gt;点击页面的搜索,把输入的信息提交到servlet,  &lt;/p&gt;
    
    </summary>
    
    
      <category term="javaweb" scheme="http://tqqluo.com/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb_03.员工信息增删改查</title>
    <link href="http://tqqluo.com/2017/10/07/JavaWeb-03-%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
    <id>http://tqqluo.com/2017/10/07/JavaWeb-03-员工信息增删改查/</id>
    <published>2017-10-06T17:19:33.000Z</published>
    <updated>2017-10-06T17:20:01.241Z</updated>
    
    <content type="html"><![CDATA[<p>##day03员工的添加,修改,删除  </p><p>##修改功能</p><p>思路 : 点击修改员工数据之后,跳转到单行文本,查询要修改的员工id的全部信息,主键id设置为readonly,其余的都可以修改,<br>修改之后,提交按钮,提交之后跳转到全部员工界面</p><a id="more"></a><p><img src="http://img.blog.csdn.net/20161024091521138" alt="这里写图片描述"></p><p>修改界面 :</p><p><img src="http://img.blog.csdn.net/20161024091538324" alt="这里写图片描述"></p><p>部分代码 :<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击修改跳转到UpShowEmp中转单行修改页面,并带上ID,可以查询员工id</span></div><div class="line"><span class="string">"&lt;td&gt;&lt;a href=\"UpShowEmp?EmpID="</span>+bean.getEmpID()+<span class="string">"\"&gt;修改&lt;a&gt;&lt;/td&gt;"</span></div><div class="line"></div><div class="line"><span class="comment">//中转修改界面</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line"><span class="comment">//设置页面编码格式,显示汉字</span></div><div class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">String id = request.getParameter(<span class="string">"EmpID"</span>);</div><div class="line">EmpDao dao = <span class="keyword">new</span> EmpDao();</div><div class="line">EmpBean bean = <span class="keyword">new</span> EmpBean();</div><div class="line">bean = dao.ShowMsgByID(id);</div><div class="line">PrintWriter pw = response.getWriter();<span class="comment">//页面显示</span></div><div class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">sb.append(<span class="string">"&lt;html&gt;&lt;body&gt;&lt;form action=\"UpdateEmp\"&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;table align=center cellpadding=3 cellspacing=0&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;tr align=center&gt;&lt;td&gt;员工编码&lt;/td&gt;&lt;td&gt;员工姓氏&lt;/td&gt;&lt;td&gt;员工名字&lt;/td&gt;&lt;td&gt;员工工资&lt;/td&gt;&lt;td&gt;入职时间&lt;/td&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;input type=text value="</span>+bean.getEmpID()+<span class="string">" readonly name="</span>+<span class="string">"empId"</span>+<span class="string">"&gt;&lt;/td&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;td&gt;&lt;input type=text name="</span>+<span class="string">"firstName"</span>+<span class="string">" value="</span>+bean.getFirstName()+<span class="string">"&gt;&lt;/td&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;td&gt;&lt;input type=text name="</span>+<span class="string">"lastName"</span>+<span class="string">" value="</span>+bean.getLastName()+<span class="string">"&gt;&lt;/td&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;td&gt;&lt;input type=text name="</span>+<span class="string">"salary"</span>+<span class="string">" value="</span>+bean.getSalary()+<span class="string">"&gt;&lt;/td&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;td&gt;&lt;input type=text name="</span>+<span class="string">"hireDate"</span>+<span class="string">" value="</span>+bean.getHireDate()+<span class="string">"&gt;&lt;/td&gt;&lt;/tr&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;/table&gt;&lt;table align=center cellpadding=3 cellspacing=0&gt;&lt;tr&gt;&lt;td&gt;&lt;input type=submit value=\"提交\" name="</span>+<span class="string">"submit&gt;&lt;/tr&gt;&lt;/td&gt;"</span>);</div><div class="line">sb.append(<span class="string">"&lt;/table &gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;"</span>);</div><div class="line">pw.write(sb.toString());</div><div class="line"></div><div class="line"><span class="comment">//修改提交之后的代码</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">EmpBean bean = <span class="keyword">new</span> EmpBean();</div><div class="line">EmpDao dao = <span class="keyword">new</span> EmpDao();</div><div class="line">String empId = request.getParameter(<span class="string">"empId"</span>);</div><div class="line">String firstName = request.getParameter(<span class="string">"firstName"</span>);</div><div class="line">String lastName = request.getParameter(<span class="string">"lastName"</span>);</div><div class="line">String salary = request.getParameter(<span class="string">"salary"</span>);</div><div class="line">String hireDate = request.getParameter(<span class="string">"hireDate"</span>);</div><div class="line"><span class="keyword">int</span> EmpId = Integer.parseInt(empId);</div><div class="line"><span class="keyword">double</span> sal = Double.parseDouble(salary);</div><div class="line">bean.setEmpID(EmpId);</div><div class="line">bean.setFirstName(firstName);</div><div class="line">bean.setLastName(lastName);</div><div class="line">bean.setSalary(sal);</div><div class="line">bean.setHireDate(hireDate);</div><div class="line"><span class="keyword">int</span> column = dao.updateEmp(bean);</div><div class="line">System.out.println(column);</div><div class="line"><span class="keyword">if</span>(column!=<span class="number">0</span>)&#123;</div><div class="line">response.sendRedirect(<span class="string">"ShowMsgByPage"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>###删除员工信息<br>那就相对简单了,点击删除之后,带上员工id,跳转到DeleteEmpServlet页面.然后request.getParameter获取传过来的id,dao中的delete方法输进去id,赋给int类型,若为1则删除成功,跳转全部员工页面.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> / /删除按钮</div><div class="line"><span class="string">"&lt;td&gt;&lt;a href=\"DeleteEmp?EmpID="</span>+bean.getEmpID()+<span class="string">"\"&gt;删除&lt;/a&gt;&lt;/td&gt;</span></div><div class="line"><span class="string"></span></div><div class="line"><span class="string">public class DeleteEmp extends HttpServlet &#123;</span></div><div class="line"><span class="string">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span></div><div class="line"><span class="string">EmpDao dao = new EmpDao();</span></div><div class="line"><span class="string">String id = request.getParameter("</span>EmpID<span class="string">");</span></div><div class="line"><span class="string">System.out.println(id);</span></div><div class="line"><span class="string">int column = dao.deleteEmp(id);</span></div><div class="line"><span class="string">if(column != 0)&#123;</span></div><div class="line"><span class="string">response.sendRedirect("</span>ShowMsgByPage<span class="string">");</span></div><div class="line"><span class="string">&#125;</span></div><div class="line"><span class="string">&#125;</span></div></pre></td></tr></table></figure></p><h3 id="添加员工信息"><a href="#添加员工信息" class="headerlink" title="添加员工信息"></a>添加员工信息</h3><p>单独设置一个a标签,点击添加之后,跳转到一个单行文本框的html页面,其中id不可以添加,序列自动生成,点击按钮之后跳转addEmpServlet界面,通过request.getParmeter获取添加的信息,然后在bean中set,然后调用dao添加方法,<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">EmpBean bean = <span class="keyword">new</span> EmpBean();</div><div class="line">EmpDao dao = <span class="keyword">new</span> EmpDao();</div><div class="line">request.getParameter(<span class="string">"submit"</span>);</div><div class="line">String firstName = request.getParameter(<span class="string">"firstName"</span>);</div><div class="line">String lastName = request.getParameter(<span class="string">"lastName"</span>);</div><div class="line">String salary = request.getParameter(<span class="string">"salary"</span>);</div><div class="line">String hireDate = request.getParameter(<span class="string">"hireDate"</span>);</div><div class="line">bean.setFirstName(firstName);</div><div class="line">bean.setLastName(lastName);</div><div class="line">bean.setHireDate(hireDate);</div><div class="line">bean.setSalary(Double.parseDouble(salary));</div><div class="line"><span class="keyword">int</span> column = dao.addEmp(bean);</div><div class="line"><span class="comment">//System.out.println(column);</span></div><div class="line"><span class="keyword">if</span>(column!=<span class="number">0</span>)&#123;</div><div class="line">response.sendRedirect(<span class="string">"ShowMsgByPage"</span>);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##day03员工的添加,修改,删除  &lt;/p&gt;
&lt;p&gt;##修改功能&lt;/p&gt;
&lt;p&gt;思路 : 点击修改员工数据之后,跳转到单行文本,查询要修改的员工id的全部信息,主键id设置为readonly,其余的都可以修改,&lt;br&gt;修改之后,提交按钮,提交之后跳转到全部员工界面&lt;/p&gt;
    
    </summary>
    
    
      <category term="javaweb" scheme="http://tqqluo.com/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb_02.登录校验、查询所有员工信息</title>
    <link href="http://tqqluo.com/2017/10/07/JavaWeb-02-%E7%99%BB%E5%BD%95%E6%A0%A1%E9%AA%8C%E3%80%81%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E5%91%98%E5%B7%A5%E4%BF%A1%E6%81%AF/"/>
    <id>http://tqqluo.com/2017/10/07/JavaWeb-02-登录校验、查询所有员工信息/</id>
    <published>2017-10-06T17:18:27.000Z</published>
    <updated>2017-10-06T17:18:58.753Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><h2 id="WEB-day02"><a href="#WEB-day02" class="headerlink" title="WEB_day02"></a>WEB_day02</h2><p>servlet 协议转对象<br>服务器解析http请求<br>默认是doGet方法<br>Servlet修改之后,重启服务器<br>xml将class文件转换成url-partn<br>post提交在正文里<br><a id="more"></a><br>方法的回调<br>控制层  Servlet  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line">   <span class="comment">//设置页面 编 码 格式,显示汉字</span></div><div class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">   <span class="comment">//标准方式</span></div><div class="line">   response.setHeader(<span class="string">"ContentType"</span>;<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line"></div><div class="line">   <span class="comment">//返回登录之后的页面</span></div><div class="line"><span class="comment">//request.getRequestDispatcher("main.html").forward(request, response);//url路径不变,还是Servlet的路径</span></div><div class="line">   <span class="comment">//重定向(重点使用)</span></div><div class="line">   response.sendRedirect(<span class="string">"main.html"</span>);<span class="comment">//路径发生改变,变为main路径</span></div><div class="line"></div><div class="line"></div><div class="line">   <span class="comment">//响应值:返回登录信息</span></div><div class="line">   <span class="comment">//PrintWriter pw = response.getWriter();</span></div><div class="line">   <span class="comment">//pw.print("&lt;h1&gt;OK&lt;/font&gt;");//登录成功后在控制台返回信息</span></div><div class="line">   <span class="comment">//简写形式</span></div><div class="line">   response.getWriter().write(<span class="string">"success"</span>);</div></pre></td></tr></table></figure><p>debug<br>断点简单的解释就是告诉编译器在执行到该点（该句）的时候，停一下，方便用户看看当前的情况，包括变量等等。<br>f6一步一步执行<br>f8全部执行完  </p><h4 id="设置修改web程序-TomCat不需要重启-gt-找到tomcat的conf目录-在context-xml中添加即可"><a href="#设置修改web程序-TomCat不需要重启-gt-找到tomcat的conf目录-在context-xml中添加即可" class="headerlink" title="设置修改web程序,TomCat不需要重启-&gt;找到tomcat的conf目录,在context.xml中添加即可."></a>设置修改web程序,TomCat不需要重启-&gt;找到tomcat的conf目录,在context.xml中添加<context reloadable="true">即可.</context></h4><hr><p>登录校验界面</p><p>查询所有信息到网页</p><h2 id="DeBug调试模式-断点模式"><a href="#DeBug调试模式-断点模式" class="headerlink" title="DeBug调试模式(断点模式)"></a>DeBug调试模式(断点模式)</h2><ul><li>跟踪程序的运行状态</li><li>方便查询程序源代码</li></ul><p>debug中,从断点位置开始,一步一步执行,</p><blockquote><p>快捷键    </p><ul><li>Step Over 跳过F6</li><li>Resume 跳入到下一个断点,如果没有断点,程序运行完成.</li><li>Step 跳入(进入程序源代码)F5</li><li>Drop To Frame 返回到开始位置</li><li>Step Return 跳出F7</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;WEB-day02&quot;&gt;&lt;a href=&quot;#WEB-day02&quot; class=&quot;headerlink&quot; title=&quot;WEB_day02&quot;&gt;&lt;/a&gt;WEB_day02&lt;/h2&gt;&lt;p&gt;servlet 协议转对象&lt;br&gt;服务器解析http请求&lt;br&gt;默认是doGet方法&lt;br&gt;Servlet修改之后,重启服务器&lt;br&gt;xml将class文件转换成url-partn&lt;br&gt;post提交在正文里&lt;br&gt;
    
    </summary>
    
    
      <category term="javaweb" scheme="http://tqqluo.com/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb_01.HTTP、Servlet</title>
    <link href="http://tqqluo.com/2017/10/07/JavaWeb-01-HTTP%E3%80%81Servlet/"/>
    <id>http://tqqluo.com/2017/10/07/JavaWeb-01-HTTP、Servlet/</id>
    <published>2017-10-06T17:17:10.000Z</published>
    <updated>2017-10-06T17:17:52.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><p>##JavaWeb_day01</p><p>#HTTP协议<br>HTTP(HyperText Transfer Protocol)超文本传输协议,是TCP/IP的应用层协议,用于定义WEB浏览器与WEB服务器之间交换数据的过程以及数据本身的格式.  </p><p>Http协议版本号 : HTTP/1.0  HTTP/1.1   </p><a id="more"></a><p>交互步骤 : 基于HTTP协议的客户/服务器模式的信息交换过程，它分四个过程，建立连接、发送请求信息、发送响应信息、关闭连接。  </p><p><strong>HTTP/1.1新特性 :</strong>   </p><ol><li>在一次TCP/IP连接上可以传送多个HTTP请求和响应。  </li><li>多个请求和响应过程可以重叠  </li><li>增加了更多的请求头和响应头，比如Host等</li></ol><p>###HTTP请求组成:<br><img src="http://img.blog.csdn.net/20161019210250165" alt="这里写图片描述"></p><p>###HTTP响应<br><img src="http://img.blog.csdn.net/20161019210402073" alt="这里写图片描述"></p><p>###HTTP-&gt;post和get请求方式详解</p><ul><li>get把参数显示在地址栏上，安全级别低，不支持大数据。  </li><li>post把参数封装请求体中，安全级别高，支持大数据。</li></ul><h3 id="HTTP常用状态码"><a href="#HTTP常用状态码" class="headerlink" title="HTTP常用状态码"></a>HTTP常用状态码</h3><p>200(正常) : 表示一切正常，返回的是正常请求结果  </p><p>302/307(临时重定向) : 指出被请求的文档已被临时移动到别处，此文档的新的URL在Location响应头中给出。</p><p>304(未修改) : 表示客户机缓存的版本是最新的，客户机可以继续使用它，无需到服务器请求。    </p><p>404(找不到) : 服务器上不存在客户机所请求的资源。   </p><p>500(服务器内部错误) : 服务器端的程序发生错误</p><p>###TomCat的配置</p><p>Tomcat：实现了JSP/Servlet规范，轻量级的服务器，Servlet容器。（雄猫）<br>1.解压tomcat<br>2.配置JAVA_HOME: 服务器需要,指向JDK的路径<br>3.修改端口号 : 在TomCat-&gt;conf-&gt;server.xml中修改,修改端口是为了防止端口冲突,修改为http默认端口80<br>4.eclipse配置tomcat-&gt;windows-&gt;preferences-&gt;搜索server<br>5.创建server视图</p><p>###TomCat目录结构<br><img src="http://img.blog.csdn.net/20161019212105259" alt="这里写图片描述"></p><p>###URL(协议+主机：端口+资源地址)<br><img src="http://img.blog.csdn.net/20161019212439557" alt="这里写图片描述"></p><ul><li>server 2.5版本练习</li></ul><hr><p>请求消息头：（做好笔记，记住常用的头）<br>作用：向服务器端传递附加信息（暗号指令）  </p><ul><li>Accept:告知服务器，客户端可以接受的数据类型（MIME类型）</li><li>文件系统：通过文件的扩展名区分不同的文件的。txt jpeg</li><li>MIME类型：大类型/小类型。  </li><li>txt—&gt;text/plain  </li><li>html—-&gt;text/html </li><li><p>js—-&gt;text/javascript (具体对应关系：Tomcat\conf\web.xml) </p></li><li><p>Accept-Encoding：告知服务器，客户端可以接受的压缩编码。比如gzip</p></li><li>Accept-Language：告知服务器，客户端支持的语言。</li><li>Referer：告知服务器，从哪个页面过来的。</li></ul><p>作用：统计广告的投放效果；防止盗链。</p><ul><li>Content-Type：告知服务器，请求正文的MIME类型</li><li>默认类型：application/x-www-form-urlencoded(表单enctype属性的默认取值)</li><li>具体体现：username=abc&amp;password=123</li><li>其他类型：multipart/form-data(文件上传时用的)</li><li>If-Modified-Since：告知服务器，当前访问的资源，缓存中的文件的最后修改时间。</li><li>User-Agent:告知服务器，浏览器的类型</li><li>Content-Length：请求正文的数据长度</li><li>Cookie：（<strong>*</strong>重要）会话管理有关</li></ul><p>#Servlet<br>Servlet是一个运行在服务器端的Java小程序，通过HTTP协议用于接收来自客户端请求，并发出响应。  </p><p>####Servlet中的方法<br>public void service(ServletRequest req,ServletResponse res)<br>throws ServletException,java.io.IOException</p><p>ServletRequest req:代表着请求对象，该对象中有HTTP协议的请求部分的所有内容。它的实现类由服务器提供的，封装数据也是服务器来做的。<br>ServletResponse res：代表着响应对象，该对象中由我们写数据（HTTP协议的响应部分）进去。它的实现类也是由服务器提供的。<br>service：由服务器调用，每次请求都会调用一次。服务器采用的是多线程机制。</p><p>###Servlet执行过程<br>1.客户端访问Tomcat访问地址：<a href="http://localhost:8080/firstServlet/hello" target="_blank" rel="external">http://localhost:8080/firstServlet/hello</a><br>2.Tomcat解析客户端的访问地址<br>3.Tomcat找firstServlet应用。<br>4.找之间先搜索web.xml<br>5.接着就找到自己的类。<br>6.执行service<br>7.给用户看到结果  </p><p>##Servlet生命周期 </p><ol><li>诞生：用户第一次访问时，由容器创建他的实例。</li><li>活着：一旦创建就驻留内存（单例）。每次用户的访问，容器都会调用sevice方法发出响应（多线程）</li><li>死亡：应用被卸载或者Tomcat关闭了</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##JavaWeb_day01&lt;/p&gt;
&lt;p&gt;#HTTP协议&lt;br&gt;HTTP(HyperText Transfer Protocol)超文本传输协议,是TCP/IP的应用层协议,用于定义WEB浏览器与WEB服务器之间交换数据的过程以及数据本身的格式.  &lt;/p&gt;
&lt;p&gt;Http协议版本号 : HTTP/1.0  HTTP/1.1   &lt;/p&gt;
    
    </summary>
    
    
      <category term="javaweb" scheme="http://tqqluo.com/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>JDBC_04.大对象、Dao、Bean、DButil</title>
    <link href="http://tqqluo.com/2017/10/07/JDBC-04-%E5%A4%A7%E5%AF%B9%E8%B1%A1%E3%80%81Dao%E3%80%81Bean%E3%80%81DButil/"/>
    <id>http://tqqluo.com/2017/10/07/JDBC-04-大对象、Dao、Bean、DButil/</id>
    <published>2017-10-06T17:14:56.000Z</published>
    <updated>2017-10-06T17:15:29.693Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><h3 id="JDBCday04-大对象-Dao-DBUtil-JavaBean"><a href="#JDBCday04-大对象-Dao-DBUtil-JavaBean" class="headerlink" title="JDBCday04_大对象_Dao_DBUtil_JavaBean"></a>JDBCday04_大对象_Dao_DBUtil_JavaBean</h3><h2 id="大对象-一般不用"><a href="#大对象-一般不用" class="headerlink" title="大对象 (一般不用)"></a>大对象 (一般不用)</h2><p>clob(海量文字,如图书)<br>blob(二进制数据,如图片,音乐,电影)  </p><a id="more"></a><p>clob海量文字存入数据库 : FileReader(读文本) + PreparedStatement的setCharacterStream方法(以字符输入)</p><p>blob图片,音乐存入数据库 : FileInputStream(字节读) + PreparedStatement的setBinaryStream的方法(以二进制输入)  </p><p>clob海量文字从数据库写到本地磁盘 : FileWriter(文本写出) + PreparedStatement的getCharacterStream(先读再写)方法返回给Reader + FileWrite的write方法</p><p>clob图片音频从数据库写到本地磁盘 : FileOutputStream(字节写出) + ResultSet的getBinaryStream获取字节文件传给InputStream,然后创建byte数组,FileOutputStream的write方法写入.</p><h2 id="往数据库中存大文本或图片"><a href="#往数据库中存大文本或图片" class="headerlink" title="往数据库中存大文本或图片 :"></a><strong>往数据库中存大文本或图片 :</strong></h2><p>setCharacterStream(int parameterIndex,Reader x)将指定参数设置为给定输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   File file = <span class="keyword">new</span> File(<span class="string">"D:\\mianshiti.txt"</span>);</div><div class="line">   <span class="comment">//图片FileInputStream</span></div><div class="line">FileReader fr = <span class="keyword">new</span> FileReader(file);</div><div class="line"></div><div class="line">Connection conn = DBUtil.getConnection();</div><div class="line">String sql = <span class="string">"insert into t_book(book_id,book_name,book_content) values(?,?,?)"</span>;</div><div class="line">PreparedStatement pstmt = conn.prepareStatement(sql);</div><div class="line">pstmt.setString(<span class="number">1</span>, <span class="string">"1"</span>);</div><div class="line">pstmt.setString(<span class="number">2</span>,<span class="string">"面试题"</span>);</div><div class="line"></div><div class="line">   <span class="comment">//图片pstmt.setBinaryStream</span></div><div class="line">pstmt.setCharacterStream(<span class="number">3</span>, fr);</div><div class="line"><span class="keyword">int</span> i = pstmt.executeUpdate();</div><div class="line">System.out.println(i);</div><div class="line">DBUtil.close(pstmt);</div><div class="line">DBUtil.close(conn);</div><div class="line">fr.close();</div></pre></td></tr></table></figure><h2 id="2-将数据库中的大文件存放到本地"><a href="#2-将数据库中的大文件存放到本地" class="headerlink" title="2. 将数据库中的大文件存放到本地"></a>2. 将数据库中的大文件存放到本地</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">      File file = <span class="keyword">new</span> File(<span class="string">"D:\\HA.png"</span>);</div><div class="line">      <span class="comment">//输出图片FileOutputStream fos = new FileOutputStream(file);</span></div><div class="line">FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"D:\\haha.txt"</span>);</div><div class="line">Connection conn = DBUtil.getConnection();</div><div class="line">String sql = <span class="string">"select * from t_book"</span>;</div><div class="line">Statement stmt = conn.createStatement();</div><div class="line">ResultSet rs = stmt.executeQuery(sql);</div><div class="line"><span class="keyword">if</span>(rs.next()) &#123;</div><div class="line"></div><div class="line">          <span class="comment">/*  </span></div><div class="line"><span class="comment">              图片读取</span></div><div class="line"><span class="comment">              InputStream is = rs.getBinaryStream(4);</span></div><div class="line"><span class="comment">byte[] b = new byte[23000];</span></div><div class="line"><span class="comment">          */</span></div><div class="line"></div><div class="line">Reader reader = rs.getCharacterStream(<span class="number">3</span>);</div><div class="line"><span class="keyword">char</span>[] ch = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</div><div class="line"><span class="keyword">int</span> length = <span class="number">0</span>;</div><div class="line"><span class="comment">//作为整数读取的字符，如果已到达流的末尾，则返回 -1 </span></div><div class="line"><span class="keyword">while</span>((length=reader.read(ch))!=-<span class="number">1</span>) &#123;</div><div class="line">fw.write(ch, <span class="number">0</span>, length);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">fw.close();</div><div class="line">DBUtil.close(rs, stmt, conn);</div></pre></td></tr></table></figure><h2 id="DAO-Database-Access-Object-数据库访问对象"><a href="#DAO-Database-Access-Object-数据库访问对象" class="headerlink" title="DAO(Database Access Object)数据库访问对象"></a>DAO(Database Access Object)数据库访问对象</h2><ul><li>使用数据库访问对象来抽象和封装对数据库的所有访问</li><li>将底层的数据库访问和上层的业务逻辑分开</li></ul><blockquote><p>Dao怎么用<br>DAO操作数据库：即在DAO中封装了一个数据表在一个项目中的增、删、改、查的全部动作。</p></blockquote><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>1.JavaBean是一个public类<br>2.JavaBean提供公共的无参构造方法<br>3.JavaBean内的属性(字段)都是私有的.这些属性只能通过  </p><blockquote><p>优点<br>1.减少了数据传递间的碎片<br>2.代码结构清晰<br>3.便于维护和程序扩展<br>4.节约了开发周期，避免了重复代码  </p></blockquote><h2 id="DBUtil"><a href="#DBUtil" class="headerlink" title="DBUtil"></a>DBUtil</h2><p>将数据库的连接和关闭封装在一个类里，在其他类里如果需要开启或者关闭连接，只需要调用DBUtil里的方法，返回一个连接即可。不需要在当前类里写繁琐的代码。</p><blockquote><p>优点<br>1.代码结构清晰<br>2.便于维护和程序扩展<br>3.节约了开发周期，避免了重复代码</p></blockquote><h3 id="查询工资在1-10的员工信息-分页显示"><a href="#查询工资在1-10的员工信息-分页显示" class="headerlink" title="查询工资在1-10的员工信息 (分页显示)"></a>查询工资在1-10的员工信息 (分页显示)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SELECT * FROM(</div><div class="line">SELECT ROWNUM r,a.* FROM(</div><div class="line">SELECT copy_emp.* FROM copy_emp WHERE salary IS NOT NULL ORDER BY salary DESC)a)</div><div class="line">WHERE r&gt;0 AND r&lt;=10</div></pre></td></tr></table></figure><p>##分页代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 分页显示</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;EmpBean&gt; <span class="title">showEmpMagByPage</span><span class="params">(<span class="keyword">int</span> page,<span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">Connection conn = DBUtil.getConnection();</div><div class="line">String sql = <span class="string">"SELECT * FROM ( "</span> +</div><div class="line"><span class="string">" SELECT ROWNUM r,a.* FROM ( "</span> +</div><div class="line"><span class="string">" SELECT copy_emp.* FROM copy_emp"</span>+ </div><div class="line"><span class="string">" WHERE salary IS NOT NULL ORDER BY salary DESC ) a ) "</span> +</div><div class="line"><span class="string">" WHERE r&gt;? AND r&lt;=?"</span>;<span class="comment">//字符串前边要加空格</span></div><div class="line">PreparedStatement pstmt = <span class="keyword">null</span>;</div><div class="line"><span class="comment">//int pageSize = 10;//每页显示条数</span></div><div class="line"><span class="keyword">int</span> startPage = (page - <span class="number">1</span>) * pageSize;</div><div class="line"><span class="keyword">int</span> endPage = pageSize * page;</div><div class="line">ResultSet rs = <span class="keyword">null</span>;</div><div class="line">List&lt;EmpBean&gt; list = <span class="keyword">new</span> ArrayList&lt;EmpBean&gt;();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">pstmt = conn.prepareStatement(sql);</div><div class="line">pstmt.setInt(<span class="number">1</span>, startPage);</div><div class="line">pstmt.setInt(<span class="number">2</span>, endPage);</div><div class="line">rs = pstmt.executeQuery();</div><div class="line"><span class="keyword">while</span>(rs.next()) &#123;</div><div class="line">EmpBean bean = <span class="keyword">new</span> EmpBean();</div><div class="line"><span class="comment">//bean.getFirstName(rs.getString(1));</span></div><div class="line">bean.setRownum(rs.getInt(<span class="number">1</span>));</div><div class="line">bean.setEmpID(rs.getInt(<span class="number">2</span>));</div><div class="line">bean.setFirstName(rs.getString(<span class="number">3</span>));</div><div class="line">bean.setLastName(rs.getString(<span class="number">4</span>));</div><div class="line">bean.setSalary(rs.getDouble(<span class="number">9</span>));</div><div class="line">list.add(bean);</div><div class="line">&#125;</div><div class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125; <span class="keyword">finally</span> &#123;</div><div class="line"><span class="comment">//DBUtil.close(rs, pstmt, conn);</span></div><div class="line">DBUtil.close(rs);</div><div class="line">DBUtil.close(pstmt);</div><div class="line">DBUtil.close(conn);</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;JDBCday04-大对象-Dao-DBUtil-JavaBean&quot;&gt;&lt;a href=&quot;#JDBCday04-大对象-Dao-DBUtil-JavaBean&quot; class=&quot;headerlink&quot; title=&quot;JDBCday04_大对象_Dao_DBUtil_JavaBean&quot;&gt;&lt;/a&gt;JDBCday04_大对象_Dao_DBUtil_JavaBean&lt;/h3&gt;&lt;h2 id=&quot;大对象-一般不用&quot;&gt;&lt;a href=&quot;#大对象-一般不用&quot; class=&quot;headerlink&quot; title=&quot;大对象 (一般不用)&quot;&gt;&lt;/a&gt;大对象 (一般不用)&lt;/h2&gt;&lt;p&gt;clob(海量文字,如图书)&lt;br&gt;blob(二进制数据,如图片,音乐,电影)  &lt;/p&gt;
    
    </summary>
    
    
      <category term="jdbc" scheme="http://tqqluo.com/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title>JDBC_03.批处理、事务、元数据</title>
    <link href="http://tqqluo.com/2017/10/07/JDBC-03-%E6%89%B9%E5%A4%84%E7%90%86%E3%80%81%E4%BA%8B%E5%8A%A1%E3%80%81%E5%85%83%E6%95%B0%E6%8D%AE/"/>
    <id>http://tqqluo.com/2017/10/07/JDBC-03-批处理、事务、元数据/</id>
    <published>2017-10-06T17:12:48.000Z</published>
    <updated>2017-10-06T17:41:19.323Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><h1 id="JDBC-day03"><a href="#JDBC-day03" class="headerlink" title="JDBC_day03"></a>JDBC_day03</h1><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   String a = <span class="string">"abc"</span>;  **效率高 , 常量池**</div><div class="line">   String b = <span class="string">"abc"</span>;</div><div class="line">System.out.println(a==b);<span class="comment">//true</span></div><div class="line">System.out.println(a.equals(b));<span class="comment">//true</span></div><div class="line"></div><div class="line">String A = <span class="keyword">new</span> String(<span class="string">"abc"</span>);<span class="comment">//创建了一个或两个对象(池中有,创建一个,池中没有 创建两个)</span></div><div class="line">String B = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</div><div class="line">System.out.println(A==B);<span class="comment">//false</span></div><div class="line">System.out.println(A.equals(B));<span class="comment">//true</span></div><div class="line">System.out.println(A==b);<span class="comment">//false</span></div><div class="line">System.out.println(A.equals(b));<span class="comment">//true</span></div></pre></td></tr></table></figure><hr><h2 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h2><ul><li>预编译的批处理执行insert 语句</li><li>addBatch();</li></ul><h4 id="非预编译批处理"><a href="#非预编译批处理" class="headerlink" title="非预编译批处理"></a>非预编译批处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">   String sql1 = <span class="string">"update copy_emp set salary=salary+'"</span> + count +<span class="string">"'where employee_id='"</span>+empIDA+<span class="string">"'"</span>;</div><div class="line">String sql2 = <span class="string">"update copy_emp set salary=salary-'"</span> +count +<span class="string">"' where employee_id='"</span>+empIDB+<span class="string">"'"</span>;</div><div class="line">Statement stmt = conn.createStatement();</div><div class="line">stmt.addBatch(sql1);</div><div class="line">stmt.addBatch(sql2);</div><div class="line"><span class="keyword">int</span>[] arr = stmt.executeBatch();</div><div class="line">System.out.println(arr[<span class="number">0</span>]+<span class="string">","</span>+arr[<span class="number">1</span>]);<span class="comment">//1,1</span></div></pre></td></tr></table></figure><h4 id="预编译批处理"><a href="#预编译批处理" class="headerlink" title="预编译批处理"></a>预编译批处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">   String sql  = <span class="string">"insert into t_student(stu_name,stu_age) values(?,?)"</span>;</div><div class="line">PreparedStatement pstmt = conn.prepareStatement(sql);</div><div class="line">pstmt.setString(<span class="number">1</span>, <span class="string">"小刚!"</span>);</div><div class="line">pstmt.setInt(<span class="number">2</span>, <span class="number">3</span>);</div><div class="line">pstmt.addBatch();</div><div class="line"></div><div class="line">pstmt.setString(<span class="number">1</span>, <span class="string">"小虎!!"</span>);</div><div class="line">pstmt.setInt(<span class="number">2</span>, <span class="number">4</span>);</div><div class="line">pstmt.addBatch();</div><div class="line"></div><div class="line"><span class="keyword">int</span>[] arr = pstmt.executeBatch();</div><div class="line"><span class="comment">//只要输出不为0,就说明有影响行数</span></div><div class="line">System.out.println(arr[<span class="number">0</span>] + <span class="string">","</span> + arr[<span class="number">1</span>]);<span class="comment">//-2 , -2</span></div></pre></td></tr></table></figure><p>##JDBC事务<br>所谓事务就是所有的sql操作要么一起成功,要么一起失败,类似于银行一个账户给另一个账户转账.</p><p><strong>事务的特性</strong> : 原子性,一致性,隔离性或独立性,持久性</p><p>####步骤:</p><ol><li>取消掉Connection中设置的自动提交方式：conn.setAutoCommit(false) ; </li><li>如果批处理操作成功，则执行提交事务：conn.commit() ;<br>如果操作失败，则肯定会引发异常，在异常处理中让事务回滚：conn.rollback() ; </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">   Connection conn = DBUtil.getConnection();</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</div><div class="line"><span class="keyword">int</span> i = DBUtil.updateSql(<span class="string">"update copy_emp set salary=salary+'"</span> + count +<span class="string">"'where employee_id='"</span>+empIDA+<span class="string">"'"</span>);</div><div class="line"><span class="keyword">int</span> j = DBUtil.updateSql(<span class="string">"update copy_emp set salarys=salary-'"</span> +count +<span class="string">"' where employee_id='"</span>+empIDB+<span class="string">"'"</span>);</div><div class="line">System.out.println(i+<span class="string">","</span>+j);</div><div class="line">conn.commit();</div><div class="line">&#125; <span class="keyword">catch</span> (SQLException e2) &#123;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">conn.rollback();</div><div class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line"><span class="comment">// TODO Auto-generated catch block</span></div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure><p>##元数据<br>就是描述数据库对象的结构的数据。  </p><ul><li>DatabaseMetaData 数据库的元数据,如数据库的名称,版本等</li><li>ResultSetMetaData 查询结果的元数据, 如查询结果中字段数量(列数), 某字段名称等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">//数据库元数据</span></div><div class="line">   DatabaseMetaData dbmd = conn.getMetaData();</div><div class="line"><span class="keyword">int</span> i = dbmd.getDatabaseMajorVersion();</div><div class="line">System.out.println(<span class="string">"数据库主版本 : "</span> + i);<span class="comment">//10</span></div><div class="line"><span class="keyword">int</span> j = dbmd.getDatabaseMinorVersion();</div><div class="line">System.out.println(<span class="string">"数据库次版本 : "</span> + j);<span class="comment">//2</span></div><div class="line">String name = dbmd.getDatabaseProductName();</div><div class="line">System.out.println(<span class="string">"数据库名字 :　"</span> + name);<span class="comment">//Oracle</span></div><div class="line">String version = dbmd.getDatabaseProductVersion();</div><div class="line"><span class="comment">/*Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - Production With the Partitioning, OLAP and Data Mining options*/</span></div><div class="line">System.out.println(<span class="string">"数据库版本 : "</span> + version);</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//结果集元数据</span></div><div class="line">  stmt = conn.createStatement();</div><div class="line">rs = stmt.executeQuery(sql);</div><div class="line">ResultSetMetaData rsmd = rs.getMetaData();</div><div class="line"><span class="keyword">int</span> column = rsmd.getColumnCount();</div><div class="line">System.out.println(column);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= column ; i++) &#123;</div><div class="line"><span class="comment">//打印所有字段名称</span></div><div class="line">System.out.println(rsmd.getColumnName(i));</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span>(rs.next()) &#123;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= column ; i++) &#123;</div><div class="line">    <span class="comment">//打印所有数据</span></div><div class="line">System.out.print(rs.getString(i)+<span class="string">"\t"</span>);</div><div class="line">&#125;</div><div class="line">System.out.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;JDBC-day03&quot;&gt;&lt;a href=&quot;#JDBC-day03&quot; class=&quot;headerlink&quot; title=&quot;JDBC_day03&quot;&gt;&lt;/a&gt;JDBC_day03&lt;/h1&gt;
    
    </summary>
    
    
      <category term="jdbc" scheme="http://tqqluo.com/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title>JDBC_02.DML以及预编译、DBUtil工具类</title>
    <link href="http://tqqluo.com/2017/10/07/JDBC-02-DML%E4%BB%A5%E5%8F%8A%E9%A2%84%E7%BC%96%E8%AF%91%E3%80%81DBUtil%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://tqqluo.com/2017/10/07/JDBC-02-DML以及预编译、DBUtil工具类/</id>
    <published>2017-10-06T17:11:49.000Z</published>
    <updated>2017-10-06T17:12:18.362Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><h1 id="jdbc-day02"><a href="#jdbc-day02" class="headerlink" title="jdbc day02"></a>jdbc day02</h1><p>##DML语法</p><ul><li>比起插叙语句,没有ResultSet结果集,stmt.executeUpdate(sql)返回的是改变几行的int类型.  </li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">前几步和day01一致</div><div class="line">//3.写sql语句</div><div class="line">String sql = &quot;insert into copy_emp(last_name) values(&quot;+&quot;&apos;洛哥哥&apos;)&quot;;</div><div class="line">//4.创建发送对象</div><div class="line">Statement stmt = conn.createStatement();</div><div class="line">stmt.executeUpdate(sql);</div><div class="line">//7.关闭资源</div></pre></td></tr></table></figure><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><p>sql注入就是<strong>用户输入的值,当做了sql语言的一部分,</strong>然后攻破密码等重要信息.<br>为了防止sql注入,就要将含有单引号的<strong>采用预编译处理.</strong>  </p><p>比如 :</p><p><code>String USERNAME = &quot;admin&quot;;</code><br><code>String PASSWORD = &quot;123 OR &#39;1&#39; = &#39;1&quot;;</code> <strong>(sql注入,使破解后的密码恒成立)</strong></p><blockquote><p>打印输入密码之后的sql语言</p></blockquote><p><code>select count(*) from login where USERNAME= &#39;admin&#39; and PASSWORD= &#39;123&#39; OR &#39;1&#39;=&#39;1&#39;;</code></p><p>##预编译 </p><ul><li>采用?占位符, 将需要输入单引号的sal语法用?表示.</li><li>书写简单,而且防止sql注入问题.</li><li>PreparedStatement继承Statement.</li><li>预编译中的问号,pre.setString(1,”哈哈”);<br><strong>1代表第一个问号,不代表第一个参数.</strong></li></ul><blockquote><p>###预编译中和普通编译区别在于:</p><p>####普通编译:<br>        //4.创建发送对象<br>        Statement stmt = conn.createStatement();<br>        //5.发送sql语句<br>        ResultSet rs = stmt.executeQuery(sql);</p><p>####预编译<br>        //4.创建预编译对象<br>        PreparedStatement pstmt = conn.prepareStatement(sql);<br>        //5.填入数据<br>        pstmt.setString(1, myUsername);<br>        pstmt.setString(2, myPassword);<br>        //6.创建结果集<br>        ResultSet rs = pstmt.executeQuery();</p></blockquote><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">      前两步与day01一致,查看用户输入的用户名和密码是否是已经存在数据库的</div><div class="line">      String myUsername = &quot;admin&quot;;</div><div class="line">String myPassword = &quot;admin&quot;;</div><div class="line">//3.写sql语句(判断输入的用户名密码在数据库中有几条记录)</div><div class="line">String sql = &quot;select count(*) count from login1 where username = ? and password = ?&quot;;</div><div class="line">//4.创建预编译对象</div><div class="line">PreparedStatement pstmt = conn.prepareStatement(sql);</div><div class="line">//5.填入数据</div><div class="line">pstmt.setString(1, myUsername);</div><div class="line">pstmt.setString(2, myPassword);</div><div class="line">//6.创建结果集</div><div class="line">ResultSet rs = pstmt.executeQuery();</div><div class="line">//7.查询select结果</div><div class="line">if(rs.next()) &#123;</div><div class="line">String flag = rs.getString(&quot;count&quot;);</div><div class="line">if(&quot;1&quot;.equals(flag)) &#123;</div><div class="line">System.out.println(&quot;登录成功&quot;);</div><div class="line">&#125; else &#123;</div><div class="line">System.out.println(&quot;登录失败&quot;);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">//8.关闭资源</div></pre></td></tr></table></figure><p>##DBUtil</p><ul><li>将属性和方法设置为static静态,方便以后直接用类名调用.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">public class DBUtil &#123;</div><div class="line">private final static String DriverName = &quot;oracle.jdbc.OracleDriver&quot;;</div><div class="line">private final static String URL = &quot;jdbc:oracle:thin:@localhost:1521:orcl&quot;;</div><div class="line">private final static String USERNAME = &quot;scott&quot;;</div><div class="line">private final static String PASSWORD = &quot;luogg&quot;;</div><div class="line">private static Connection conn ;</div><div class="line">private static Statement stmt ;</div><div class="line">//private static PreparedStatement pstmt;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 连接数据库方法</div><div class="line"> * @return Connection</div><div class="line"> * @param conn 数据库连接对象</div><div class="line"> */</div><div class="line"></div><div class="line">public static Connection getConnection() &#123;</div><div class="line">try &#123;</div><div class="line">Class.forName(DriverName);</div><div class="line">conn = DriverManager.getConnection(URL,USERNAME,PASSWORD);</div><div class="line">&#125; catch (ClassNotFoundException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125; catch (Exception e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">return conn;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 查询语句关闭</div><div class="line"> * @param rs 结果集</div><div class="line"> * @param stmt 发送对象</div><div class="line"> * @param conn 连接对象</div><div class="line"> */</div><div class="line">public static void close(ResultSet rs,Statement stmt,Connection conn) &#123;</div><div class="line">if(rs != null)&#123;</div><div class="line">try &#123;</div><div class="line">rs.close();</div><div class="line">&#125; catch (SQLException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">if(stmt != null) &#123;</div><div class="line">try &#123;</div><div class="line">rs.close();</div><div class="line">&#125; catch (SQLException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">if(conn != null) &#123;</div><div class="line">try &#123;</div><div class="line">conn.close();</div><div class="line">&#125; catch (SQLException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 非查询语句关闭资源</div><div class="line"> * @param stmt 发送对象</div><div class="line"> * @param conn 连接对象</div><div class="line"> */</div><div class="line">public static void close(Statement stmt,Connection conn) &#123;</div><div class="line">close(null,stmt,conn);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 查询语句</div><div class="line"> * @param sql</div><div class="line"> * @return ResultSet</div><div class="line"> */</div><div class="line">public static ResultSet selectSql(String sql) &#123;</div><div class="line">ResultSet rs = null;</div><div class="line">try &#123;</div><div class="line">stmt = conn.createStatement();</div><div class="line">rs = stmt.executeQuery(sql);</div><div class="line">&#125; catch (SQLException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">return rs;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 增删改的SQL语句</div><div class="line"> * @param sql</div><div class="line"> * @return</div><div class="line"> */</div><div class="line">public static int runSql(String sql) &#123;</div><div class="line">int result = 0;</div><div class="line">try &#123;</div><div class="line">Statement stmt = conn.createStatement();</div><div class="line">result = stmt.executeUpdate(sql);</div><div class="line">&#125; catch (SQLException e) &#123;</div><div class="line">// TODO Auto-generated catch block</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div><div class="line">return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;jdbc-day02&quot;&gt;&lt;a href=&quot;#jdbc-day02&quot; class=&quot;headerlink&quot; title=&quot;jdbc day02&quot;&gt;&lt;/a&gt;jdbc day02&lt;/h1&gt;&lt;p&gt;##DML语法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比起插叙语句,没有ResultSet结果集,stmt.executeUpdate(sql)返回的是改变几行的int类型.  &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="jdbc" scheme="http://tqqluo.com/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title>JDBC_01.连接oracle以及查询语句</title>
    <link href="http://tqqluo.com/2017/10/07/JDBC-01-%E8%BF%9E%E6%8E%A5oracle%E4%BB%A5%E5%8F%8A%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
    <id>http://tqqluo.com/2017/10/07/JDBC-01-连接oracle以及查询语句/</id>
    <published>2017-10-06T17:10:15.000Z</published>
    <updated>2017-10-06T17:10:51.322Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><p>##<strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a> </strong>  谢谢配合! </p></blockquote><p>#JDBC part1</p><p>###JDBC概述<br>jdbc是一种用于执行SQL语句的Java API,通过这套API可以访问各种关系数据库,例如;Oracle,MySql,SQLServer等.</p><ul><li>JDBC驱动程序是各个数据库厂家根据JDBC的W3C规范制作的JDBC实现类.</li><li>oracle 驱动地址:F:\Oracle\product\10.2.0\db_1\jdbc\lib-&gt;class12.jar</li><li>将jar包直接扔到项目下,然后右键add buildpath.</li></ul><a id="more"></a><p><img src="http://img.blog.csdn.net/20161008201118394" alt="这里写图片描述"></p><p>###JDBC API</p><ol><li>DricerManager : 管理驱动程序的类</li><li>Connection : 驱动提供的与数据库连接的对话</li><li>Statement : 执行sql语句并返回它所生成的结果的对象</li><li>PreparedStatement : 表示预编译的SQL语句的对象</li><li>ResultSet : 查询的结果集  </li></ol><hr><ul><li>如果要定义private final static 常量,就要将定义语句放在类下,方法外.</li><li>java.sql.SQLException: Io 异常: The Network Adapter could not establish the connection 这是因为数据库还没有启动= =!</li></ul><h2 id="JDBC步骤"><a href="#JDBC步骤" class="headerlink" title="JDBC步骤"></a>JDBC步骤</h2><p>####1.注册驱动程序 : Class.forName(“oracle.jdbc.OracleDriver”);  </p><p>####2.获取数据库连接 : Connection conn = DriverManager.getConnection(url,username,password);<br>其中,url = “jdbc:oracle:thin:@localhost:1521:orcl”;<br>url是数据库厂商自己定义的,username = “scott”;数据库用户名,password=”数据库用户登录密码”;  </p><p>####3.写sql语句 String sql = “select * from copy_emp;”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String name = &quot;Steven&quot;;</div><div class="line">String sql = &quot;select * from copy_emp where first_name = &quot;+&quot;&apos;&quot;+name+&quot;&apos;&quot;;</div><div class="line">   //在oracle中,String类型需要使用&apos;&apos;单引号表示,所以java中就需要用&quot;&apos;&quot;表示一个分号.</div></pre></td></tr></table></figure></p><p>####4.创建发送对象. Statement stmt = conn.createStatement();  </p><p>####5.发送sql语句 ResultSet stmt.executeQuery(sql);</p><p>####6.处理结果集<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">while(rs.next()) &#123;  </div><div class="line">System.out.println(rs.getString(1)+rs.getString(2)</div><div class="line">+rs.getString(3)+rs.getInt(&quot;salary&quot;));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中,rs.getString(int),括号中位int类型时,表示的是第int列的数据,如果rs.getString(String),括号中位String类型时,表示的是对应的列名.</p><p>####7.关闭资源,后打开的先关闭</p><hr><h4 id="执行查询语句，使用的是executeQuery-返回的是结果集"><a href="#执行查询语句，使用的是executeQuery-返回的是结果集" class="headerlink" title="执行查询语句，使用的是executeQuery();返回的是结果集 ;"></a>执行查询语句，使用的是executeQuery();返回的是结果集 ;</h4><h4 id="执行update，insert，delete使用的是executeUpdate-返回的是数字，代表影响行数。"><a href="#执行update，insert，delete使用的是executeUpdate-返回的是数字，代表影响行数。" class="headerlink" title="执行update，insert，delete使用的是executeUpdate();返回的是数字，代表影响行数。"></a>执行update，insert，delete使用的是executeUpdate();返回的是数字，代表影响行数。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectJDBC</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String DriverName = <span class="string">"oracle.jdbc.OracleDriver"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String URL = <span class="string">"jdbc:oracle:thin:@localhost:1521:orcl"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String USERNAME = <span class="string">"scott"</span>;</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PASSWORD = <span class="string">"luogg"</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</div><div class="line"><span class="comment">//1.注ce驱动</span></div><div class="line">Class.forName(DriverName);</div><div class="line"><span class="comment">//2.获取连接</span></div><div class="line">Connection conn = DriverManager.getConnection(URL,USERNAME,PASSWORD);</div><div class="line"><span class="comment">//3.写sql语句</span></div><div class="line"><span class="comment">//String name = "Steven";</span></div><div class="line"><span class="comment">//String sql = "select * from copy_emp where department_id=100";</span></div><div class="line"><span class="comment">//String sql = "select * from copy_emp where first_name = "+"'"+name+"'";</span></div><div class="line"><span class="comment">//System.out.println(sql);</span></div><div class="line"><span class="comment">//String sql1 = "select * from copy_emp where first_name = "+"'洛'";</span></div><div class="line">String startTime = <span class="string">"1994-01-01"</span>;</div><div class="line">String endTime = <span class="string">"2000-01-01"</span>;</div><div class="line">String sql = <span class="string">"select * from copy_emp where hire_date between to_date("</span>+<span class="string">"'"</span>+startTime+<span class="string">"'"</span>+<span class="string">","</span>+<span class="string">"'"</span>+<span class="string">"yyyy-mm-dd"</span>+<span class="string">"'"</span>+<span class="string">")"</span>+<span class="string">"and to_date("</span>+<span class="string">"'"</span>+endTime+<span class="string">"'"</span>+<span class="string">","</span>+<span class="string">"'"</span>+<span class="string">"yyyy-mm-dd"</span>+<span class="string">"'"</span>+<span class="string">")"</span>;</div><div class="line">System.out.println(sql);</div><div class="line"><span class="comment">//4.创建发送对象</span></div><div class="line">Statement stmt = conn.createStatement();</div><div class="line"><span class="comment">//5.发送sql语句</span></div><div class="line">ResultSet rs = stmt.executeQuery(sql);</div><div class="line"><span class="comment">//6.处理结果集</span></div><div class="line"><span class="keyword">while</span>(rs.next()) &#123;</div><div class="line">System.out.println(rs.getString(<span class="string">"first_name"</span>)+<span class="string">" "</span>+</div><div class="line">rs.getString(<span class="string">"salary"</span>));</div><div class="line">&#125;</div><div class="line"><span class="comment">//7.关闭资源</span></div><div class="line">rs.close();</div><div class="line">stmt.close();</div><div class="line">conn.close();</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;p&gt;##&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt; &lt;/strong&gt;  谢谢配合! &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#JDBC part1&lt;/p&gt;
&lt;p&gt;###JDBC概述&lt;br&gt;jdbc是一种用于执行SQL语句的Java API,通过这套API可以访问各种关系数据库,例如;Oracle,MySql,SQLServer等.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JDBC驱动程序是各个数据库厂家根据JDBC的W3C规范制作的JDBC实现类.&lt;/li&gt;
&lt;li&gt;oracle 驱动地址:F:\Oracle\product\10.2.0\db_1\jdbc\lib-&amp;gt;class12.jar&lt;/li&gt;
&lt;li&gt;将jar包直接扔到项目下,然后右键add buildpath.&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="jdbc" scheme="http://tqqluo.com/tags/jdbc/"/>
    
  </entry>
  
  <entry>
    <title>Linux学习笔记</title>
    <link href="http://tqqluo.com/2017/10/07/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://tqqluo.com/2017/10/07/Linux学习笔记/</id>
    <published>2017-10-06T17:05:27.000Z</published>
    <updated>2017-10-06T17:06:06.721Z</updated>
    
    <content type="html"><![CDATA[<p>Linux,1991年,系统安全,良好的可移植性,多用户,多任务,良好的兼容性,良好的用户界面,<br>    主流的是RedHat或者CentOS,</p><p><img src="http://img.blog.csdn.net/20161226100238438?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvZ2df/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><a id="more"></a>    <pre><code>CentOS 设置的网关 192.168.2.2Windows 设置的网关 192.168.2.1取消命令行一直运行:Ctrl+c在命令行中切换root用户: su , 然后刷新网卡:service network restartwin切换linux : ctrl+Glinux切换win : ctrl+alt在root权限下关闭图形界面 :　init 3启动图形界面 : startx清除界面 : clearls 查看目录ls -l 查看目录具体信息drwxr 文件夹的意思-rw 文件的意思pwd 当前路径的全信息,linux中目录为正斜杠,win中为反斜杠    /home/yun11cd 切换目录bin目录 : 普通命令sbin : 需要权限的命令,系统的命令dev : 硬件设备etc : 配置信息boot : 跟启动相关的配置home : 用户的主目录usr : 用户共享的软件dev : 设备管理器cd..目录回退linux中文件的顶级目录是 &quot;/&quot;[yun11@localhost ~ ] : ~表示家目录ll 快捷查看当前目录下的所有文件mkdir luogg 创建luogg文件夹,必须在自己的目录下[yun11@localhost ~],不然没有权限rmdir 删除文件夹,非空时候无法删除rm -r luogg 删除文件夹,-r表示递归删除,若文件夹中含有子文件会递归删除,touch 创建空文件echo &quot; xxx&quot; &gt; test.txt 输出内容到test.txt这个文件中echo &quot; xxx&quot; &gt;&gt; test.txt 追加cat test.txt 查看文件内容rm 删除文件cp 复制文件,cp test.txt luogg/ 复制到luogg文件夹下more/less + 文件名 分页查看文件    shift+g 移动到最后边gg 移动到最前边退出 q或者ctrl+ctail + 文件名  查看文件的末尾位置(查看最新文件信息)tail + -f + 文件名  查看实时动态信息mv oldname newname 修改名字gzip 压缩tar 打包sudo 使用超级用户的权限去做一件事情-rwx 可读可写可执行sudo chmod u+rwx test.txt 普通用户使用超级权限    也可以使用二进制修改    sudo chmod 777 test.txt (rwx)修改文件的所属人和所属组 : sudo chown yun11:yun11 test.txt</code></pre><p>利用FileZilla远程登录传输文件 端口为22表示SSH登录 21表示ftp</p><h3 id="系统-网络-操作"><a href="#系统-网络-操作" class="headerlink" title="系统(网络)操作"></a>系统(网络)操作</h3><pre><code>top 查看进程ps 看瞬时的进程快照  ps -ef | grep xxx 搜索某个进程 kill 杀死一个进程,可以通过进程id 杀死    free 看磁盘使用情况df -h 磁盘使用情况du -sh * 查看文件大小netstat : ifconfig : 网卡配置信息ping : 检查节点之间的连通性  netstat -r : 查看网关netstat -natp : shutdown : 系统关机  -r 关机后立即重启  -h 关机后不重启halt 立刻关机reboot 立刻重启              </code></pre><p>###用户管理</p><pre><code>在root用户下添加一个用户: useradd baby        passwd baby查看当前用户所属的组 : gruops</code></pre><p>###下载软件</p><pre><code>在sftp远程连接快速启动sftp,Alt+O,传输文件 put c:/java...解压到某个文件 : tar修改环境变量 : su    vi/etc/profile    在最后边export JAVA_HOME=/home/yun11/app/jdk1.7.0_65            export PATH=$PATH:$JAVA_HOME/bin    然后 source /etc/profile保存退出 :wq或者shift+zz</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux,1991年,系统安全,良好的可移植性,多用户,多任务,良好的兼容性,良好的用户界面,&lt;br&gt;    主流的是RedHat或者CentOS,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.blog.csdn.net/20161226100238438?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvZ2df/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://tqqluo.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>sublime之markdown快捷键</title>
    <link href="http://tqqluo.com/2017/10/07/sublime%E4%B9%8Bmarkdown%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://tqqluo.com/2017/10/07/sublime之markdown快捷键/</id>
    <published>2017-10-06T17:04:24.000Z</published>
    <updated>2017-10-06T17:04:55.052Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="sublime-快捷键"><a href="#sublime-快捷键" class="headerlink" title="sublime 快捷键"></a><center>sublime 快捷键</center></h1><ul><li>ctrl + shift + p 进入命令面板</li><li><p>package install 进入下载仓库</p></li><li><p>ctrl + alt + O 在浏览器预览</p></li><li>ctrl + alt + x 导出为HTML</li><li>[TOC] 自动生成目录 </li></ul><a id="more"></a><ul><li>ctrl + B 生成网页的HTML</li><li>Ctrl+Shift+W 关闭所有打开文件</li><li>Ctrl+Shift+Enter：在当前行前插入新行    √</li><li>Ctrl+X：删除当前行      √</li><li><p>Ctrl+M：跳转到对应括号</p></li><li><p>Ctrl+/：注释当前行</p></li><li>Shift+F11：全屏免打扰模式，只编辑当前文件</li><li>Alt+Shift+数字：分屏显示  √</li><li>Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本</li><li>Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。</li><li>Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。    √</li><li>Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。 √</li><li>shift+↑ 向上选中多行</li><li>Ctrl+Shift+↑ 将光标所在行和上一行代码互换</li></ul><p>#markdown技能</p><ul><li><code>&amp;emsp;</code> &emsp; 空一个单元格</li><li><code>&lt;center&gt;</code> <center> 居中显示</center></li><li><code>&lt;center style=&quot;color:red&quot;&gt;</code> <center style="color:red"> 红色居中</center></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;sublime-快捷键&quot;&gt;&lt;a href=&quot;#sublime-快捷键&quot; class=&quot;headerlink&quot; title=&quot;sublime 快捷键&quot;&gt;&lt;/a&gt;&lt;center&gt;sublime 快捷键&lt;/center&gt;&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;ctrl + shift + p 进入命令面板&lt;/li&gt;
&lt;li&gt;&lt;p&gt;package install 进入下载仓库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ctrl + alt + O 在浏览器预览&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;ctrl + alt + x 导出为HTML&lt;/li&gt;
&lt;li&gt;[TOC] 自动生成目录 &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="快捷键" scheme="http://tqqluo.com/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Maven学习笔记</title>
    <link href="http://tqqluo.com/2017/10/07/Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://tqqluo.com/2017/10/07/Maven学习笔记/</id>
    <published>2017-10-06T17:02:33.000Z</published>
    <updated>2017-10-06T17:03:03.205Z</updated>
    
    <content type="html"><![CDATA[<p>#Maven的学习(没蚊)</p><blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><h2 id="转载请注明-出自-luogg的博客园-谢谢配合"><a href="#转载请注明-出自-luogg的博客园-谢谢配合" class="headerlink" title="转载请注明 出自 : luogg的博客园  谢谢配合!"></a><strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a></strong>  谢谢配合!</h2></blockquote><p>与maven功能类似的技术,ant,git</p><p>###一.什么是maven</p><p> maven是一个跨平台的项目管理工具,主要用于基于java平台的项目构建,依赖管理.</p><a id="more"></a><p>###二.maven的安装<br> (jdk必须1.6以上)</p><p> 1.解压<br> 2.将需要的jar包放入m2文件夹,仓库<br> 3.修改setting.xml,将<code>localRepository</code>元素中的路径指向m2jar包路径<br> 4.修改环境变量</p><p> <strong>setting.xml中配置仓库路径localRepository的时候千万别用中文路径</strong></p><p>###三.maven的约定<br>src/main/java  :    (Source Folder)存放项目的java文件<br>src/main/resources  存放项目的资源文件，如spring，hibernate的配置文件<br>src/test/java       存放所有的测试的java文件<br>src/test/resources   存放测试用的资源文件<br>target    项目输出位置<br>pom.xml  文件(坐标)    </p><p><img src="http://img.blog.csdn.net/20170331092314388?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvZ2df/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>###四.判断是否安装成功<br>svn -v(ersion)   </p><p>若没有安装成功,可能是环境变量没有配置    </p><p>###五.pom中的坐标</p><p><strong>pom.xml文件中每一个jar包都有一个坐标</strong><br>坐标是由groupId,artifactId,version,scop组成的,scope默认是compile.</p><p>groupId : 一个组织 </p><p>artifactID : 项目名称</p><p>version : 版本号</p><p>JAR文件的名字 = artifactID-version</p><p>###六.maven常用命令</p><p> mvn compile : 编译,编译之后生成target目录,里边存放class文件.</p><p> mvn clean : 清空target目录</p><p> mvn test : 编译并生成报告</p><p> mvn package : 打包成jar包</p><p> mvn install : 将jar包部署到仓库</p><p>###七.maven生命周期</p><p>清理-&gt;编译-&gt;测试-&gt;报告-&gt;打包-&gt;部署</p><p>###八.pom.xml的格式</p><p> 如果项目B需要依赖于项目A , 那么,在项目B的pom.xml中需要写入依赖关系 :<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    //组名,基本一个组下边所有项目,groupID都一样</div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima11<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">//项目名</div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">//版本号</div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p><p>###九.eclipse创建maven项目</p><p>需要先创建一个workingSet</p><p>创建的时候,选择maven骨架,atrifactID为maven-archetype-quickstart</p><p>run as macen build, goals : 输入compile</p><p>创建maven项目之后,默认用的jdk1.5的版本,需要换成本机的jdk版本.</p><p>###十.maven的依赖传递和继承</p><p> <strong>依赖的传递</strong> : 若项目A依赖于项目B,项目C又依赖于项目A,那么项目C会去依赖于项目B的,</p><p> <strong>maven的继承 :</strong> 若项目Base中有junit依赖,HelloBase工程也有junit依赖,那么HelloBase依赖于Base的话,就不需要再写junit依赖了.继承了Base中的依赖. </p><p> 我们将基类Base中pom.xml中的<code>&lt;packaging&gt;pom&lt;/packaging&gt;</code>设置为pom格式, 在HelloBase工程下边,用parent的格式引入Base中pom依赖的包<br> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima11.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div></pre></td></tr></table></figure></p><p>###十一.maven私服nexus</p><p>setting.xml的配置中, 先从本地库找对应的jar包,如果本地库找不到,就去网上找,配置了私服的话, 就去私服找,通过私服,去网上找.</p><p>私服的使用需要在setting.xml文件中配置.</p><p>###十二.配置阿里的jar包下载路径</p><p> 修改setting.xml配置文件, </p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span>     </div><div class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#Maven的学习(没蚊)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;h2 id=&quot;转载请注明-出自-luogg的博客园-谢谢配合&quot;&gt;&lt;a href=&quot;#转载请注明-出自-luogg的博客园-谢谢配合&quot; class=&quot;headerlink&quot; title=&quot;转载请注明 出自 : luogg的博客园  谢谢配合!&quot;&gt;&lt;/a&gt;&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt;&lt;/strong&gt;  谢谢配合!&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;与maven功能类似的技术,ant,git&lt;/p&gt;
&lt;p&gt;###一.什么是maven&lt;/p&gt;
&lt;p&gt; maven是一个跨平台的项目管理工具,主要用于基于java平台的项目构建,依赖管理.&lt;/p&gt;
    
    </summary>
    
    
      <category term="maven" scheme="http://tqqluo.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis_03.mapper.xml优化</title>
    <link href="http://tqqluo.com/2017/10/07/MyBatis-03-mapper-xml%E4%BC%98%E5%8C%96/"/>
    <id>http://tqqluo.com/2017/10/07/MyBatis-03-mapper-xml优化/</id>
    <published>2017-10-06T17:01:28.000Z</published>
    <updated>2017-10-06T17:44:37.755Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><h2 id="转载请注明-出自-luogg的博客园-谢谢配合"><a href="#转载请注明-出自-luogg的博客园-谢谢配合" class="headerlink" title="转载请注明 出自 : luogg的博客园  谢谢配合!"></a><strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a></strong>  谢谢配合!</h2></blockquote><p>#优化</p><p>##1.起别名(一般不用,写全方便查看类出处)</p><a id="more"></a><p>以前的写法: </p><figure class="highlight plain"><figcaption><span>id</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    在config.xml文件下</div><div class="line">    </div><div class="line">```xml</div><div class="line">    &lt;!--起别名--&gt;</div><div class="line">    &lt;typeAliases&gt;</div><div class="line">        &lt;typeAlias type=&quot;com.luogg.domain.Person&quot; alias=&quot;Person&quot;/&gt;</div><div class="line">    &lt;/typeAliases&gt;</div></pre></td></tr></table></figure><p>在Mapper.xml文件下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Person"</span>&gt;</span></div><div class="line">        SELECT * FROM person WHERE id = #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>##2.命名空间的优化(一般不用,写全方便查看类出处)</p><pre><code>命名空间是可以随意修改的,但是有可能不同包下出现相同的实体类,所以还是加上包名方便区分.</code></pre><p>##3.sql片段</p><pre><code>很多时候会写一大串的列名,比如select 所有字段,我们把经常出现的字段放入sql标签中,将来直接引用</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--sql片段--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"cols"</span>&gt;</span>id,user_name,age,sex<span class="tag">&lt;/<span class="name">sql</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"find"</span> <span class="attr">resultMap</span>=<span class="string">"personRM"</span>&gt;</span></div><div class="line">        SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"cols"</span>/&gt;</span> from person</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><p>#动态sql语句(根据用户填入条件查询,比如可以填入name搜索,也可以填入age搜索,也可以都填)</p><p><code>将parameterType设置成map即可</code><br><code>&lt;where&gt; 表示条件查询,并在后边自动添加一个1=1</code><br><code>&lt;set&gt;标签,表示修改时候用的,自动删除最后一个条件的逗号</code><br><code>&lt;foreach&gt;标签,循环标签,用于in子查询</code>    </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--动态sql语句,where标签相当于where 1=1 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selDongtai"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"personRM"</span>&gt;</span></div><div class="line">      SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"cols"</span>/&gt;</span> FROM person</div><div class="line">      <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span>and user_name like #&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"sex != null"</span>&gt;</span>and sex = #&#123;sex&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span> <span class="comment">//动态sql语句</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selDongtai</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession session = factory.openSession();</div><div class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">        map.put(<span class="string">"name"</span>,<span class="string">"l%"</span>);</div><div class="line">        map.put(<span class="string">"sex"</span>,<span class="number">1</span>);</div><div class="line">        List&lt;Person&gt; list = session.selectList(<span class="string">"com.luogg.mapper.PersonMapper.selDongtai"</span>,map);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person p : list)&#123;</div><div class="line">            System.out.println(p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>#特殊字符处理 CDATA</p><pre><code>遇到特殊字符,我们需要将其原样输出,比如&lt;&gt;,此时加上&lt;![CDATA[原样输出的内容 ]]&gt; </code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--特殊字符的处理,查询年龄在20到22岁的人员--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selTeshu"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"personRM"</span>&gt;</span></div><div class="line">        SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"cols"</span>/&gt;</span> FROM person</div><div class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null"</span>&gt;</span>and user_name like #&#123;name&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ageStart !=null"</span>&gt;</span> and age &gt;= #&#123;ageStart&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"ageEnd !=null"</span>&gt;</span> &lt;![CDATA[and age &lt;=]]&gt; #&#123;ageEnd&#125;<span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span>  <span class="comment">//特殊字符处理</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTeshu</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession session = factory.openSession();</div><div class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">        map.put(<span class="string">"ageStart"</span>,<span class="number">20</span>);</div><div class="line">        map.put(<span class="string">"ageEnd"</span>,<span class="number">22</span>);</div><div class="line">        List&lt;Person&gt; list = session.selectList(<span class="string">"com.luogg.mapper.PersonMapper.selTeshu"</span>,map);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person p : list)&#123;</div><div class="line">            System.out.println(p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;h2 id=&quot;转载请注明-出自-luogg的博客园-谢谢配合&quot;&gt;&lt;a href=&quot;#转载请注明-出自-luogg的博客园-谢谢配合&quot; class=&quot;headerlink&quot; title=&quot;转载请注明 出自 : luogg的博客园  谢谢配合!&quot;&gt;&lt;/a&gt;&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt;&lt;/strong&gt;  谢谢配合!&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;#优化&lt;/p&gt;
&lt;p&gt;##1.起别名(一般不用,写全方便查看类出处)&lt;/p&gt;
    
    </summary>
    
    
      <category term="mybatis" scheme="http://tqqluo.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis_02.增删改查、数据库字段与实体字段不一致情况</title>
    <link href="http://tqqluo.com/2017/10/07/MyBatis-02-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E3%80%81%E5%AD%97%E6%AE%B5%E4%B8%8D%E4%B8%80%E8%87%B4%E6%83%85%E5%86%B5/"/>
    <id>http://tqqluo.com/2017/10/07/MyBatis-02-增删改查、字段不一致情况/</id>
    <published>2017-10-06T16:59:33.000Z</published>
    <updated>2017-10-06T17:00:25.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.</p><h2 id="转载请注明-出自-luogg的博客园-谢谢配合"><a href="#转载请注明-出自-luogg的博客园-谢谢配合" class="headerlink" title="转载请注明 出自 : luogg的博客园  谢谢配合!"></a><strong>转载请注明 出自 : <a href="http://www.cnblogs.com/luogg" target="_blank" rel="external">luogg的博客园</a></strong>  谢谢配合!</h2></blockquote><p>##当数据库字段和实体bean中属性不一致时</p><pre><code>之前数据库Person名字字段是name,PersonBean中属性也是name,但是之后数据库中修改为了user_name,</code></pre><a id="more"></a><ul><li><p>方法1:通过sql语句的字段起别名,别名和实体中的对象属性一致<br>  <code>SELECT id,user_name as name,sex,age from person</code></p>  <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"find"</span> <span class="attr">resultType</span>=<span class="string">"com.luogg.domain.Person"</span>&gt;</span></div><div class="line">        SELECT id,user_name as name,sex,age from person</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></li><li><p>方法2: mybatis最强大的地方 : reslutMap对象</p><pre><code>添加一个中介reslutMap标签,并将select标签中的resultType改为resultMap,并对应resultMap标签的id.结果集:resultType 基础类型,int,string,Person,resultMap 针对中介标签resultMap而存在.</code></pre></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">&lt;!--配置命名空间,命名空间+ .id 是唯一的sql语句标示符--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.luogg.mapper.PersonMapper"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--中介,当数据库字段和实体bean对象属性不一致时,做一个对应关系--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"personRM"</span> <span class="attr">type</span>=<span class="string">"com.luogg.domain.Person"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--主键映射--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"ID"</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--普通字段,property指实体属性,column结果集的字段名称,一致的字段可以不写--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"USER_NAME"</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--查询所有数据,参数有id,resultType结果集,parameterType参数--&gt;</span></div><div class="line">    <span class="comment">&lt;!--注意 : sql语句中如果有要填写集合的,比如查询所有数据,返回一个Person的结果集,那么resultType参数直接写 路径+集合的类型</span></div><div class="line"><span class="comment">        比如: 返回一个Person集合,那么就填写Person Bean所在的路径+Person--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"find"</span> <span class="attr">resultMap</span>=<span class="string">"personRM"</span>&gt;</span></div><div class="line">        SELECT * from person</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--通过ID查询数据,当有查询条件时,需要写parameterType,返回结果集仍然是Person, #&#123;id&#125;或者$&#123;id&#125;都可以--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.luogg.domain.Person"</span>&gt;</span></div><div class="line">        SELECT * FROM person WHERE id = #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure><p>#mybatis的增删改查</p><p>##新增人员信息</p><pre><code>首先在PersonMapper.xml中添加insert标签,我们的数据库字段user_name,Person实体属性为name,不一致,区别开来.然后在TestMybatis中写入代码.</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--添加人员--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span> <span class="attr">parameterType</span>=<span class="string">"com.luogg.domain.Person"</span>&gt;</span></div><div class="line">        INSERT INTO person(id,user_name,age,sex) VALUES(#&#123;id&#125;,#&#123;name&#125;,#&#123;age&#125;,#&#123;sex&#125;)</div><div class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.luogg.domain.Person;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</div><div class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</div><div class="line"><span class="keyword">import</span> org.junit.Before;</div><div class="line"><span class="keyword">import</span> org.junit.Test;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InputStream;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by luogg on 2017/2/17.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMybatis</span> </span>&#123;</div><div class="line">    <span class="comment">//SqlSessionFactory为线程安全的</span></div><div class="line">    <span class="keyword">private</span> SqlSessionFactory factory;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        String resource = <span class="string">"sqlMapConfig.xml"</span>;</div><div class="line">        InputStream is = Resources.getResourceAsStream(resource);</div><div class="line">        factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span> <span class="comment">//查询所有</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 测试数据库的连接</span></div><div class="line"><span class="comment">         * 1.定义一个String类型的变量resource,指向刚才配置的连接数据库的xml文件</span></div><div class="line"><span class="comment">         * 2.创建一个输入流,来读取我们的数据库配置文件</span></div><div class="line"><span class="comment">         * 3.输入流创建工厂.</span></div><div class="line"><span class="comment">         * 4.有了工厂之后open工厂</span></div><div class="line"><span class="comment">         * 5.通过session访问配置文件中的sql语句</span></div><div class="line"><span class="comment">         */</span></div><div class="line"></div><div class="line">        SqlSession session = factory.openSession();</div><div class="line"></div><div class="line">        <span class="comment">//如何访问PersonMapper.xml中的sql语句呢? 命名空间+ .id</span></div><div class="line">        List&lt;Person&gt; list = session.selectList(<span class="string">"com.luogg.mapper.PersonMapper.find"</span>);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person p : list)&#123;</div><div class="line">            System.out.println(p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Test</span> <span class="comment">//通过ID查询人员信息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selById</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession session = factory.openSession();</div><div class="line">        Person p = session.selectOne(<span class="string">"com.luogg.mapper.PersonMapper.selById"</span>,<span class="number">1</span>);</div><div class="line">        System.out.println(p);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span> <span class="comment">//添加人员信息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession session = factory.openSession();</div><div class="line">        Person p = <span class="keyword">new</span> Person();</div><div class="line">        p.setId(<span class="number">4</span>);</div><div class="line">        p.setName(<span class="string">"luogg"</span>);</div><div class="line">        p.setAge(<span class="number">22</span>);</div><div class="line">        p.setSex(<span class="number">1</span>);</div><div class="line">        <span class="keyword">int</span> i = session.insert(<span class="string">"com.luogg.mapper.PersonMapper.insert"</span>,p);</div><div class="line">        session.commit();</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</div><div class="line">            System.out.print(<span class="string">"添加人员成功"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>##修改人员信息 , 查询总的记录条数</p><p>prsonMapper.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--修改成员信息--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"com.luogg.domain.Person"</span>&gt;</span></div><div class="line">        UPDATE person SET user_name=#&#123;name&#125;,age=#&#123;age&#125; WHERE id=#&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--查询总的记录--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"count"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></div><div class="line">        SELECT COUNT(*) FROM person</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure></p><p>TestMybatis.java文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span> <span class="comment">//修改人员信息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updatePer</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession session = factory.openSession();</div><div class="line">        Person p = <span class="keyword">new</span> Person();</div><div class="line">        p.setId(<span class="number">4</span>);</div><div class="line">        p.setName(<span class="string">"luoggg"</span>);</div><div class="line">        <span class="comment">//p.setSex(1);</span></div><div class="line">        p.setAge(<span class="number">23</span>);</div><div class="line">        <span class="keyword">int</span> i = session.update(<span class="string">"com.luogg.mapper.PersonMapper.update"</span>,p);</div><div class="line">        session.commit();</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">1</span>)&#123;</div><div class="line">            System.out.print(<span class="string">"修改信息成功"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span> <span class="comment">//查询总的记录条数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selCount</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession session = factory.openSession();</div><div class="line">        <span class="keyword">int</span> i = session.selectOne(<span class="string">"com.luogg.mapper.PersonMapper.count"</span>);</div><div class="line">        System.out.println(i);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>#条件查询</p><pre><code>根据条件查询</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--带条件查询--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selByL"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultMap</span>=<span class="string">"personRM"</span>&gt;</span></div><div class="line">        SELECT <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"cols"</span>/&gt;</span> FROM person</div><div class="line">        where user_name like #&#123;name&#125;</div><div class="line">        AND sex=#&#123;sex&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Test</span> <span class="comment">//带条 件查询</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selByL</span><span class="params">()</span></span>&#123;</div><div class="line">        SqlSession session = factory.openSession();</div><div class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">        map.put(<span class="string">"name"</span>,<span class="string">"luo%"</span>);</div><div class="line">        map.put(<span class="string">"sex"</span>,<span class="number">1</span>);</div><div class="line">        List&lt;Person&gt; list = session.selectList(<span class="string">"com.luogg.mapper.PersonMapper.selByL"</span>,map);</div><div class="line">        System.out.println(list.size());</div><div class="line">        <span class="keyword">for</span>(Person p : list)&#123;</div><div class="line">            System.out.println(p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20170219173752307?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbHVvZ2df/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;##本文为博主辛苦总结,希望自己以后返回来看的时候理解更深刻,也希望可以起到帮助初学者的作用.&lt;/p&gt;
&lt;h2 id=&quot;转载请注明-出自-luogg的博客园-谢谢配合&quot;&gt;&lt;a href=&quot;#转载请注明-出自-luogg的博客园-谢谢配合&quot; class=&quot;headerlink&quot; title=&quot;转载请注明 出自 : luogg的博客园  谢谢配合!&quot;&gt;&lt;/a&gt;&lt;strong&gt;转载请注明 出自 : &lt;a href=&quot;http://www.cnblogs.com/luogg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;luogg的博客园&lt;/a&gt;&lt;/strong&gt;  谢谢配合!&lt;/h2&gt;&lt;/blockquote&gt;
&lt;p&gt;##当数据库字段和实体bean中属性不一致时&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;之前数据库Person名字字段是name,PersonBean中属性也是name,但是之后数据库中修改为了user_name,
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="mybatis" scheme="http://tqqluo.com/tags/mybatis/"/>
    
  </entry>
  
</feed>
